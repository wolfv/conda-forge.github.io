(self.webpackChunkcf_infra_docs=self.webpackChunkcf_infra_docs||[]).push([[1703],{81209:function(e,t,s){e.exports=function(){"use strict";var e="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==s.g?s.g:"undefined"!=typeof self?self:{};function t(e){return e&&e.default||e}var r,o,i={load:function(e,t,s={}){var r,o,i;for(r in t)i=t[r],s[r]=null!=(o=e[r])?o:i;return s},overwrite:function(e,t,s={}){var r,o;for(r in e)o=e[r],void 0!==t[r]&&(s[r]=o);return s}},n=class{constructor(e,t){this.incr=e,this.decr=t,this._first=null,this._last=null,this.length=0}push(e){var t;this.length++,"function"==typeof this.incr&&this.incr(),t={value:e,prev:this._last,next:null},null!=this._last?(this._last.next=t,this._last=t):this._first=this._last=t}shift(){var e;if(null!=this._first)return this.length--,"function"==typeof this.decr&&this.decr(),e=this._first.value,null!=(this._first=this._first.next)?this._first.prev=null:this._last=null,e}first(){if(null!=this._first)return this._first.value}getArray(){var e,t,s;for(e=this._first,s=[];null!=e;)s.push((t=e,e=e.next,t.value));return s}forEachShift(e){var t;for(t=this.shift();null!=t;)e(t),t=this.shift()}debug(){var e,t,s,r,o;for(e=this._first,o=[];null!=e;)o.push((t=e,e=e.next,{value:t.value,prev:null!=(s=t.prev)?s.value:void 0,next:null!=(r=t.next)?r.value:void 0}));return o}},a=class{constructor(e){if(this.instance=e,this._events={},null!=this.instance.on||null!=this.instance.once||null!=this.instance.removeAllListeners)throw new Error("An Emitter already exists for this object");this.instance.on=(e,t)=>this._addListener(e,"many",t),this.instance.once=(e,t)=>this._addListener(e,"once",t),this.instance.removeAllListeners=(e=null)=>null!=e?delete this._events[e]:this._events={}}_addListener(e,t,s){var r;return null==(r=this._events)[e]&&(r[e]=[]),this._events[e].push({cb:s,status:t}),this.instance}listenerCount(e){return null!=this._events[e]?this._events[e].length:0}async trigger(e,...t){var s,r;try{if("debug"!==e&&this.trigger("debug",`Event triggered: ${e}`,t),null==this._events[e])return;return this._events[e]=this._events[e].filter((function(e){return"none"!==e.status})),r=this._events[e].map((async e=>{var s,r;if("none"!==e.status){"once"===e.status&&(e.status="none");try{return"function"==typeof(null!=(r="function"==typeof e.cb?e.cb(...t):void 0)?r.then:void 0)?await r:r}catch(o){return s=o,this.trigger("error",s),null}}})),(await Promise.all(r)).find((function(e){return null!=e}))}catch(o){return s=o,this.trigger("error",s),null}}};r=n,o=a;var c,l,u,p,d=class{constructor(e){this.Events=new o(this),this._length=0,this._lists=function(){var t,s,o;for(o=[],t=1,s=e;1<=s?t<=s:t>=s;1<=s?++t:--t)o.push(new r((()=>this.incr()),(()=>this.decr())));return o}.call(this)}incr(){if(0==this._length++)return this.Events.trigger("leftzero")}decr(){if(0==--this._length)return this.Events.trigger("zero")}push(e){return this._lists[e.options.priority].push(e)}queued(e){return null!=e?this._lists[e].length:this._length}shiftAll(e){return this._lists.forEach((function(t){return t.forEachShift(e)}))}getFirst(e=this._lists){var t,s,r;for(t=0,s=e.length;t<s;t++)if((r=e[t]).length>0)return r;return[]}shiftLastFrom(e){return this.getFirst(this._lists.slice(e).reverse()).shift()}},h=class extends Error{};u=10,l=5,p=i,c=h;var g,m,_=class{constructor(e,t,s,r,o,i,n,a){this.task=e,this.args=t,this.rejectOnDrop=o,this.Events=i,this._states=n,this.Promise=a,this.options=p.load(s,r),this.options.priority=this._sanitizePriority(this.options.priority),this.options.id===r.id&&(this.options.id=`${this.options.id}-${this._randomIndex()}`),this.promise=new this.Promise(((e,t)=>{this._resolve=e,this._reject=t})),this.retryCount=0}_sanitizePriority(e){var t;return(t=~~e!==e?l:e)<0?0:t>u-1?u-1:t}_randomIndex(){return Math.random().toString(36).slice(2)}doDrop({error:e,message:t="This job has been dropped by Bottleneck"}={}){return!!this._states.remove(this.options.id)&&(this.rejectOnDrop&&this._reject(null!=e?e:new c(t)),this.Events.trigger("dropped",{args:this.args,options:this.options,task:this.task,promise:this.promise}),!0)}_assertStatus(e){var t;if((t=this._states.jobStatus(this.options.id))!==e&&("DONE"!==e||null!==t))throw new c(`Invalid job status ${t}, expected ${e}. Please open an issue at https://github.com/SGrondin/bottleneck/issues`)}doReceive(){return this._states.start(this.options.id),this.Events.trigger("received",{args:this.args,options:this.options})}doQueue(e,t){return this._assertStatus("RECEIVED"),this._states.next(this.options.id),this.Events.trigger("queued",{args:this.args,options:this.options,reachedHWM:e,blocked:t})}doRun(){return 0===this.retryCount?(this._assertStatus("QUEUED"),this._states.next(this.options.id)):this._assertStatus("EXECUTING"),this.Events.trigger("scheduled",{args:this.args,options:this.options})}async doExecute(e,t,s,r){var o,i,n;0===this.retryCount?(this._assertStatus("RUNNING"),this._states.next(this.options.id)):this._assertStatus("EXECUTING"),i={args:this.args,options:this.options,retryCount:this.retryCount},this.Events.trigger("executing",i);try{if(n=await(null!=e?e.schedule(this.options,this.task,...this.args):this.task(...this.args)),t())return this.doDone(i),await r(this.options,i),this._assertStatus("DONE"),this._resolve(n)}catch(a){return o=a,this._onFailure(o,i,t,s,r)}}doExpire(e,t,s){var r,o;return this._states.jobStatus("RUNNING"===this.options.id)&&this._states.next(this.options.id),this._assertStatus("EXECUTING"),o={args:this.args,options:this.options,retryCount:this.retryCount},r=new c(`This job timed out after ${this.options.expiration} ms.`),this._onFailure(r,o,e,t,s)}async _onFailure(e,t,s,r,o){var i,n;if(s())return null!=(i=await this.Events.trigger("failed",e,t))?(n=~~i,this.Events.trigger("retry",`Retrying ${this.options.id} after ${n} ms`,t),this.retryCount++,r(n)):(this.doDone(t),await o(this.options,t),this._assertStatus("DONE"),this._reject(e))}doDone(e){return this._assertStatus("EXECUTING"),this._states.next(this.options.id),this.Events.trigger("done",e)}};m=i,g=h;var f,T=class{constructor(e,t,s){this.instance=e,this.storeOptions=t,this.clientId=this.instance._randomIndex(),m.load(s,s,this),this._nextRequest=this._lastReservoirRefresh=this._lastReservoirIncrease=Date.now(),this._running=0,this._done=0,this._unblockTime=0,this.ready=this.Promise.resolve(),this.clients={},this._startHeartbeat()}_startHeartbeat(){var e;return null==this.heartbeat&&(null!=this.storeOptions.reservoirRefreshInterval&&null!=this.storeOptions.reservoirRefreshAmount||null!=this.storeOptions.reservoirIncreaseInterval&&null!=this.storeOptions.reservoirIncreaseAmount)?"function"==typeof(e=this.heartbeat=setInterval((()=>{var e,t,s,r,o;if(r=Date.now(),null!=this.storeOptions.reservoirRefreshInterval&&r>=this._lastReservoirRefresh+this.storeOptions.reservoirRefreshInterval&&(this._lastReservoirRefresh=r,this.storeOptions.reservoir=this.storeOptions.reservoirRefreshAmount,this.instance._drainAll(this.computeCapacity())),null!=this.storeOptions.reservoirIncreaseInterval&&r>=this._lastReservoirIncrease+this.storeOptions.reservoirIncreaseInterval&&(({reservoirIncreaseAmount:e,reservoirIncreaseMaximum:s,reservoir:o}=this.storeOptions),this._lastReservoirIncrease=r,(t=null!=s?Math.min(e,s-o):e)>0))return this.storeOptions.reservoir+=t,this.instance._drainAll(this.computeCapacity())}),this.heartbeatInterval)).unref?e.unref():void 0:clearInterval(this.heartbeat)}async __publish__(e){return await this.yieldLoop(),this.instance.Events.trigger("message",e.toString())}async __disconnect__(e){return await this.yieldLoop(),clearInterval(this.heartbeat),this.Promise.resolve()}yieldLoop(e=0){return new this.Promise((function(t,s){return setTimeout(t,e)}))}computePenalty(){var e;return null!=(e=this.storeOptions.penalty)?e:15*this.storeOptions.minTime||5e3}async __updateSettings__(e){return await this.yieldLoop(),m.overwrite(e,e,this.storeOptions),this._startHeartbeat(),this.instance._drainAll(this.computeCapacity()),!0}async __running__(){return await this.yieldLoop(),this._running}async __queued__(){return await this.yieldLoop(),this.instance.queued()}async __done__(){return await this.yieldLoop(),this._done}async __groupCheck__(e){return await this.yieldLoop(),this._nextRequest+this.timeout<e}computeCapacity(){var e,t;return({maxConcurrent:e,reservoir:t}=this.storeOptions),null!=e&&null!=t?Math.min(e-this._running,t):null!=e?e-this._running:null!=t?t:null}conditionsCheck(e){var t;return null==(t=this.computeCapacity())||e<=t}async __incrementReservoir__(e){var t;return await this.yieldLoop(),t=this.storeOptions.reservoir+=e,this.instance._drainAll(this.computeCapacity()),t}async __currentReservoir__(){return await this.yieldLoop(),this.storeOptions.reservoir}isBlocked(e){return this._unblockTime>=e}check(e,t){return this.conditionsCheck(e)&&this._nextRequest-t<=0}async __check__(e){var t;return await this.yieldLoop(),t=Date.now(),this.check(e,t)}async __register__(e,t,s){var r,o;return await this.yieldLoop(),r=Date.now(),this.conditionsCheck(t)?(this._running+=t,null!=this.storeOptions.reservoir&&(this.storeOptions.reservoir-=t),o=Math.max(this._nextRequest-r,0),this._nextRequest=r+o+this.storeOptions.minTime,{success:!0,wait:o,reservoir:this.storeOptions.reservoir}):{success:!1}}strategyIsBlock(){return 3===this.storeOptions.strategy}async __submit__(e,t){var s,r,o;if(await this.yieldLoop(),null!=this.storeOptions.maxConcurrent&&t>this.storeOptions.maxConcurrent)throw new g(`Impossible to add a job having a weight of ${t} to a limiter having a maxConcurrent setting of ${this.storeOptions.maxConcurrent}`);return r=Date.now(),o=null!=this.storeOptions.highWater&&e===this.storeOptions.highWater&&!this.check(t,r),(s=this.strategyIsBlock()&&(o||this.isBlocked(r)))&&(this._unblockTime=r+this.computePenalty(),this._nextRequest=this._unblockTime+this.storeOptions.minTime,this.instance._dropAllQueued()),{reachedHWM:o,blocked:s,strategy:this.storeOptions.strategy}}async __free__(e,t){return await this.yieldLoop(),this._running-=t,this._done+=t,this.instance._drainAll(this.computeCapacity()),{running:this._running}}};f=h;var y,w=class{constructor(e){this.status=e,this._jobs={},this.counts=this.status.map((function(){return 0}))}next(e){var t,s;return s=(t=this._jobs[e])+1,null!=t&&s<this.status.length?(this.counts[t]--,this.counts[s]++,this._jobs[e]++):null!=t?(this.counts[t]--,delete this._jobs[e]):void 0}start(e){var t;return t=0,this._jobs[e]=t,this.counts[t]++}remove(e){var t;return null!=(t=this._jobs[e])&&(this.counts[t]--,delete this._jobs[e]),null!=t}jobStatus(e){var t;return null!=(t=this.status[this._jobs[e]])?t:null}statusJobs(e){var t,s,r,o;if(null!=e){if((s=this.status.indexOf(e))<0)throw new f(`status must be one of ${this.status.join(", ")}`);for(t in o=[],r=this._jobs)r[t]===s&&o.push(t);return o}return Object.keys(this._jobs)}statusCounts(){return this.counts.reduce(((e,t,s)=>(e[this.status[s]]=t,e)),{})}};y=n;var E,b,k,v,S,A=class{constructor(e,t){this.schedule=this.schedule.bind(this),this.name=e,this.Promise=t,this._running=0,this._queue=new y}isEmpty(){return 0===this._queue.length}async _tryToRun(){var e,t,s,r,o,i,n;if(this._running<1&&this._queue.length>0)return this._running++,({task:n,args:e,resolve:o,reject:r}=this._queue.shift()),t=await async function(){try{return i=await n(...e),function(){return o(i)}}catch(t){return s=t,function(){return r(s)}}}(),this._running--,this._tryToRun(),t()}schedule(e,...t){var s,r,o;return o=r=null,s=new this.Promise((function(e,t){return o=e,r=t})),this._queue.push({task:e,args:t,resolve:o,reject:r}),this._tryToRun(),s}},O="2.19.5",P={version:O},G=Object.freeze({version:O,default:P}),R=()=>console.log("You must import the full version of Bottleneck in order to use this feature."),F=()=>console.log("You must import the full version of Bottleneck in order to use this feature.");S=i,E=a,k=R,b=F,v=()=>console.log("You must import the full version of Bottleneck in order to use this feature.");var D,U,C=function(){class e{constructor(e={}){this.deleteKey=this.deleteKey.bind(this),this.limiterOptions=e,S.load(this.limiterOptions,this.defaults,this),this.Events=new E(this),this.instances={},this.Bottleneck=J,this._startAutoCleanup(),this.sharedConnection=null!=this.connection,null==this.connection&&("redis"===this.limiterOptions.datastore?this.connection=new k(Object.assign({},this.limiterOptions,{Events:this.Events})):"ioredis"===this.limiterOptions.datastore&&(this.connection=new b(Object.assign({},this.limiterOptions,{Events:this.Events}))))}key(e=""){var t;return null!=(t=this.instances[e])?t:(()=>{var t;return t=this.instances[e]=new this.Bottleneck(Object.assign(this.limiterOptions,{id:`${this.id}-${e}`,timeout:this.timeout,connection:this.connection})),this.Events.trigger("created",t,e),t})()}async deleteKey(e=""){var t,s;return s=this.instances[e],this.connection&&(t=await this.connection.__runCommand__(["del",...v.allKeys(`${this.id}-${e}`)])),null!=s&&(delete this.instances[e],await s.disconnect()),null!=s||t>0}limiters(){var e,t,s,r;for(e in s=[],t=this.instances)r=t[e],s.push({key:e,limiter:r});return s}keys(){return Object.keys(this.instances)}async clusterKeys(){var e,t,s,r,o,i,n,a,c;if(null==this.connection)return this.Promise.resolve(this.keys());for(i=[],e=null,c=`b_${this.id}-`.length,t=9;0!==e;)for([a,s]=await this.connection.__runCommand__(["scan",null!=e?e:0,"match",`b_${this.id}-*_settings`,"count",1e4]),e=~~a,r=0,n=s.length;r<n;r++)o=s[r],i.push(o.slice(c,-t));return i}_startAutoCleanup(){var e;return clearInterval(this.interval),"function"==typeof(e=this.interval=setInterval((async()=>{var e,t,s,r,o,i;for(t in o=Date.now(),r=[],s=this.instances){i=s[t];try{await i._store.__groupCheck__(o)?r.push(this.deleteKey(t)):r.push(void 0)}catch(n){e=n,r.push(i.Events.trigger("error",e))}}return r}),this.timeout/2)).unref?e.unref():void 0}updateSettings(e={}){if(S.overwrite(e,this.defaults,this),S.overwrite(e,e,this.limiterOptions),null!=e.timeout)return this._startAutoCleanup()}disconnect(e=!0){var t;if(!this.sharedConnection)return null!=(t=this.connection)?t.disconnect(e):void 0}}return e.prototype.defaults={timeout:3e5,connection:null,Promise:Promise,id:"group-key"},e}.call(e);U=i,D=a;var I,L,j,q,x,z,$,B,W,M,H=function(){class e{constructor(e={}){this.options=e,U.load(this.options,this.defaults,this),this.Events=new D(this),this._arr=[],this._resetPromise(),this._lastFlush=Date.now()}_resetPromise(){return this._promise=new this.Promise(((e,t)=>this._resolve=e))}_flush(){return clearTimeout(this._timeout),this._lastFlush=Date.now(),this._resolve(),this.Events.trigger("batch",this._arr),this._arr=[],this._resetPromise()}add(e){var t;return this._arr.push(e),t=this._promise,this._arr.length===this.maxSize?this._flush():null!=this.maxTime&&1===this._arr.length&&(this._timeout=setTimeout((()=>this._flush()),this.maxTime)),t}}return e.prototype.defaults={maxTime:null,maxSize:null,Promise:Promise},e}.call(e),N=()=>console.log("You must import the full version of Bottleneck in order to use this feature."),V=t(G),K=[].splice;x=10,I=5,M=i,z=d,j=_,q=T,$=N,L=a,B=w,W=A;var J=function(){class e{constructor(t={},...s){var r,o;this._addToQueue=this._addToQueue.bind(this),this._validateOptions(t,s),M.load(t,this.instanceDefaults,this),this._queues=new z(x),this._scheduled={},this._states=new B(["RECEIVED","QUEUED","RUNNING","EXECUTING"].concat(this.trackDoneStatus?["DONE"]:[])),this._limiter=null,this.Events=new L(this),this._submitLock=new W("submit",this.Promise),this._registerLock=new W("register",this.Promise),o=M.load(t,this.storeDefaults,{}),this._store=function(){if("redis"===this.datastore||"ioredis"===this.datastore||null!=this.connection)return r=M.load(t,this.redisStoreDefaults,{}),new $(this,o,r);if("local"===this.datastore)return r=M.load(t,this.localStoreDefaults,{}),new q(this,o,r);throw new e.prototype.BottleneckError(`Invalid datastore type: ${this.datastore}`)}.call(this),this._queues.on("leftzero",(()=>{var e;return null!=(e=this._store.heartbeat)&&"function"==typeof e.ref?e.ref():void 0})),this._queues.on("zero",(()=>{var e;return null!=(e=this._store.heartbeat)&&"function"==typeof e.unref?e.unref():void 0}))}_validateOptions(t,s){if(null==t||"object"!=typeof t||0!==s.length)throw new e.prototype.BottleneckError("Bottleneck v2 takes a single object argument. Refer to https://github.com/SGrondin/bottleneck#upgrading-to-v2 if you're upgrading from Bottleneck v1.")}ready(){return this._store.ready}clients(){return this._store.clients}channel(){return`b_${this.id}`}channel_client(){return`b_${this.id}_${this._store.clientId}`}publish(e){return this._store.__publish__(e)}disconnect(e=!0){return this._store.__disconnect__(e)}chain(e){return this._limiter=e,this}queued(e){return this._queues.queued(e)}clusterQueued(){return this._store.__queued__()}empty(){return 0===this.queued()&&this._submitLock.isEmpty()}running(){return this._store.__running__()}done(){return this._store.__done__()}jobStatus(e){return this._states.jobStatus(e)}jobs(e){return this._states.statusJobs(e)}counts(){return this._states.statusCounts()}_randomIndex(){return Math.random().toString(36).slice(2)}check(e=1){return this._store.__check__(e)}_clearGlobalState(e){return null!=this._scheduled[e]&&(clearTimeout(this._scheduled[e].expiration),delete this._scheduled[e],!0)}async _free(e,t,s,r){var o,i;try{if(({running:i}=await this._store.__free__(e,s.weight)),this.Events.trigger("debug",`Freed ${s.id}`,r),0===i&&this.empty())return this.Events.trigger("idle")}catch(n){return o=n,this.Events.trigger("error",o)}}_run(e,t,s){var r,o,i;return t.doRun(),r=this._clearGlobalState.bind(this,e),i=this._run.bind(this,e,t),o=this._free.bind(this,e,t),this._scheduled[e]={timeout:setTimeout((()=>t.doExecute(this._limiter,r,i,o)),s),expiration:null!=t.options.expiration?setTimeout((function(){return t.doExpire(r,i,o)}),s+t.options.expiration):void 0,job:t}}_drainOne(e){return this._registerLock.schedule((()=>{var t,s,r,o,i;return 0===this.queued()?this.Promise.resolve(null):(i=this._queues.getFirst(),({options:o,args:t}=r=i.first()),null!=e&&o.weight>e?this.Promise.resolve(null):(this.Events.trigger("debug",`Draining ${o.id}`,{args:t,options:o}),s=this._randomIndex(),this._store.__register__(s,o.weight,o.expiration).then((({success:e,wait:n,reservoir:a})=>{var c;return this.Events.trigger("debug",`Drained ${o.id}`,{success:e,args:t,options:o}),e?(i.shift(),(c=this.empty())&&this.Events.trigger("empty"),0===a&&this.Events.trigger("depleted",c),this._run(s,r,n),this.Promise.resolve(o.weight)):this.Promise.resolve(null)}))))}))}_drainAll(e,t=0){return this._drainOne(e).then((s=>{var r;return null!=s?(r=null!=e?e-s:e,this._drainAll(r,t+s)):this.Promise.resolve(t)})).catch((e=>this.Events.trigger("error",e)))}_dropAllQueued(e){return this._queues.shiftAll((function(t){return t.doDrop({message:e})}))}stop(t={}){var s,r;return t=M.load(t,this.stopDefaults),r=e=>{var t;return t=()=>{var t;return(t=this._states.counts)[0]+t[1]+t[2]+t[3]===e},new this.Promise(((e,s)=>t()?e():this.on("done",(()=>{if(t())return this.removeAllListeners("done"),e()}))))},s=t.dropWaitingJobs?(this._run=function(e,s){return s.doDrop({message:t.dropErrorMessage})},this._drainOne=()=>this.Promise.resolve(null),this._registerLock.schedule((()=>this._submitLock.schedule((()=>{var e,s,o;for(e in s=this._scheduled)o=s[e],"RUNNING"===this.jobStatus(o.job.options.id)&&(clearTimeout(o.timeout),clearTimeout(o.expiration),o.job.doDrop({message:t.dropErrorMessage}));return this._dropAllQueued(t.dropErrorMessage),r(0)}))))):this.schedule({priority:x-1,weight:0},(()=>r(1))),this._receive=function(s){return s._reject(new e.prototype.BottleneckError(t.enqueueErrorMessage))},this.stop=()=>this.Promise.reject(new e.prototype.BottleneckError("stop() has already been called")),s}async _addToQueue(t){var s,r,o,i,n,a,c;({args:s,options:i}=t);try{({reachedHWM:n,blocked:r,strategy:c}=await this._store.__submit__(this.queued(),i.weight))}catch(l){return o=l,this.Events.trigger("debug",`Could not queue ${i.id}`,{args:s,options:i,error:o}),t.doDrop({error:o}),!1}return r?(t.doDrop(),!0):n&&(null!=(a=c===e.prototype.strategy.LEAK?this._queues.shiftLastFrom(i.priority):c===e.prototype.strategy.OVERFLOW_PRIORITY?this._queues.shiftLastFrom(i.priority+1):c===e.prototype.strategy.OVERFLOW?t:void 0)&&a.doDrop(),null==a||c===e.prototype.strategy.OVERFLOW)?(null==a&&t.doDrop(),n):(t.doQueue(n,r),this._queues.push(t),await this._drainAll(),n)}_receive(t){return null!=this._states.jobStatus(t.options.id)?(t._reject(new e.prototype.BottleneckError(`A job with the same id already exists (id=${t.options.id})`)),!1):(t.doReceive(),this._submitLock.schedule(this._addToQueue,t))}submit(...e){var t,s,r,o,i,n,a;return"function"==typeof e[0]?(i=e,[s,...e]=i,[t]=K.call(e,-1),o=M.load({},this.jobDefaults)):(n=e,[o,s,...e]=n,[t]=K.call(e,-1),o=M.load(o,this.jobDefaults)),a=(...e)=>new this.Promise((function(t,r){return s(...e,(function(...e){return(null!=e[0]?r:t)(e)}))})),(r=new j(a,e,o,this.jobDefaults,this.rejectOnDrop,this.Events,this._states,this.Promise)).promise.then((function(e){return"function"==typeof t?t(...e):void 0})).catch((function(e){return Array.isArray(e)?"function"==typeof t?t(...e):void 0:"function"==typeof t?t(e):void 0})),this._receive(r)}schedule(...e){var t,s,r;return"function"==typeof e[0]?([r,...e]=e,s={}):[s,r,...e]=e,t=new j(r,e,s,this.jobDefaults,this.rejectOnDrop,this.Events,this._states,this.Promise),this._receive(t),t.promise}wrap(e){var t,s;return t=this.schedule.bind(this),(s=function(...s){return t(e.bind(this),...s)}).withOptions=function(s,...r){return t(s,e,...r)},s}async updateSettings(e={}){return await this._store.__updateSettings__(M.overwrite(e,this.storeDefaults)),M.overwrite(e,this.instanceDefaults,this),this}currentReservoir(){return this._store.__currentReservoir__()}incrementReservoir(e=0){return this._store.__incrementReservoir__(e)}}return e.default=e,e.Events=L,e.version=e.prototype.version=V.version,e.strategy=e.prototype.strategy={LEAK:1,OVERFLOW:2,OVERFLOW_PRIORITY:4,BLOCK:3},e.BottleneckError=e.prototype.BottleneckError=h,e.Group=e.prototype.Group=C,e.RedisConnection=e.prototype.RedisConnection=R,e.IORedisConnection=e.prototype.IORedisConnection=F,e.Batcher=e.prototype.Batcher=H,e.prototype.jobDefaults={priority:I,weight:1,expiration:null,id:"<no-id>"},e.prototype.storeDefaults={maxConcurrent:null,minTime:0,highWater:null,strategy:e.prototype.strategy.LEAK,penalty:null,reservoir:null,reservoirRefreshInterval:null,reservoirRefreshAmount:null,reservoirIncreaseInterval:null,reservoirIncreaseAmount:null,reservoirIncreaseMaximum:null},e.prototype.localStoreDefaults={Promise:Promise,timeout:null,heartbeatInterval:250},e.prototype.redisStoreDefaults={Promise:Promise,timeout:null,heartbeatInterval:5e3,clientTimeout:1e4,Redis:null,clientOptions:{},clusterNodes:null,clearDatastore:!1,connection:null},e.prototype.instanceDefaults={datastore:"local",connection:null,id:"<no-id>",rejectOnDrop:!0,trackDoneStatus:!1,Promise:Promise},e.prototype.stopDefaults={enqueueErrorMessage:"This limiter has been stopped and cannot accept new jobs.",dropWaitingJobs:!0,dropErrorMessage:"This limiter has been stopped."},e}.call(e);return J}()},31703:(e,t,s)=>{"use strict";function r(){return"object"==typeof navigator&&"userAgent"in navigator?navigator.userAgent:"object"==typeof process&&void 0!==process.version?`Node.js/${process.version.substr(1)} (${process.platform}; ${process.arch})`:"<environment undetectable>"}function o(e,t,s,r){if("function"!=typeof s)throw new Error("method for before hook must be a function");return r||(r={}),Array.isArray(t)?t.reverse().reduce(((t,s)=>o.bind(null,e,s,t,r)),s)():Promise.resolve().then((()=>e.registry[t]?e.registry[t].reduce(((e,t)=>t.hook.bind(null,e,r)),s)():s(r)))}function i(e,t,s,r){const o=r;e.registry[s]||(e.registry[s]=[]),"before"===t&&(r=(e,t)=>Promise.resolve().then(o.bind(null,t)).then(e.bind(null,t))),"after"===t&&(r=(e,t)=>{let s;return Promise.resolve().then(e.bind(null,t)).then((e=>(s=e,o(s,t)))).then((()=>s))}),"error"===t&&(r=(e,t)=>Promise.resolve().then(e.bind(null,t)).catch((e=>o(e,t)))),e.registry[s].push({hook:r,orig:o})}function n(e,t,s){if(!e.registry[t])return;const r=e.registry[t].map((e=>e.orig)).indexOf(s);-1!==r&&e.registry[t].splice(r,1)}s.d(t,{vd:()=>ks});const a=Function.bind,c=a.bind(a);function l(e,t,s){const r=c(n,null).apply(null,s?[t,s]:[t]);e.api={remove:r},e.remove=r,["before","error","after","wrap"].forEach((r=>{const o=s?[t,r,s]:[t,r];e[r]=e.api[r]=c(i,null).apply(null,o)}))}const u={Singular:function(){const e=Symbol("Singular"),t={registry:{}},s=o.bind(null,t,e);return l(s,t,e),s},Collection:function(){const e={registry:{}},t=o.bind(null,e);return l(t,e),t}};var p=`octokit-endpoint.js/0.0.0-development ${r()}`;function d(e,t){const s=Object.assign({},e);return Object.keys(t).forEach((r=>{!function(e){if("object"!=typeof e||null===e)return!1;if("[object Object]"!==Object.prototype.toString.call(e))return!1;const t=Object.getPrototypeOf(e);if(null===t)return!0;const s=Object.prototype.hasOwnProperty.call(t,"constructor")&&t.constructor;return"function"==typeof s&&s instanceof s&&Function.prototype.call(s)===Function.prototype.call(e)}(t[r])?Object.assign(s,{[r]:t[r]}):r in e?s[r]=d(e[r],t[r]):Object.assign(s,{[r]:t[r]})})),s}function h(e){for(const t in e)void 0===e[t]&&delete e[t];return e}function g(e,t,s){if("string"==typeof t){let[e,r]=t.split(" ");s=Object.assign(r?{method:e,url:r}:{url:e},s)}else s=Object.assign({},t);var r;s.headers=(r=s.headers)?Object.keys(r).reduce(((e,t)=>(e[t.toLowerCase()]=r[t],e)),{}):{},h(s),h(s.headers);const o=d(e||{},s);return"/graphql"===s.url&&(e&&e.mediaType.previews?.length&&(o.mediaType.previews=e.mediaType.previews.filter((e=>!o.mediaType.previews.includes(e))).concat(o.mediaType.previews)),o.mediaType.previews=(o.mediaType.previews||[]).map((e=>e.replace(/-preview/,"")))),o}var m=/\{[^}]+\}/g;function _(e){return e.replace(/^\W+|\W+$/g,"").split(/,/)}function f(e,t){const s={__proto__:null};for(const r of Object.keys(e))-1===t.indexOf(r)&&(s[r]=e[r]);return s}function T(e){return e.split(/(%[0-9A-Fa-f]{2})/g).map((function(e){return/%[0-9A-Fa-f]/.test(e)||(e=encodeURI(e).replace(/%5B/g,"[").replace(/%5D/g,"]")),e})).join("")}function y(e){return encodeURIComponent(e).replace(/[!'()*]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}))}function w(e,t,s){return t="+"===e||"#"===e?T(t):y(t),s?y(s)+"="+t:t}function E(e){return null!=e}function b(e){return";"===e||"&"===e||"?"===e}function k(e,t){var s=["+","#",".","/",";","?","&"];return e=e.replace(/\{([^\{\}]+)\}|([^\{\}]+)/g,(function(e,r,o){if(r){let e="";const o=[];if(-1!==s.indexOf(r.charAt(0))&&(e=r.charAt(0),r=r.substr(1)),r.split(/,/g).forEach((function(s){var r=/([^:\*]*)(?::(\d+)|(\*))?/.exec(s);o.push(function(e,t,s,r){var o=e[s],i=[];if(E(o)&&""!==o)if("string"==typeof o||"number"==typeof o||"boolean"==typeof o)o=o.toString(),r&&"*"!==r&&(o=o.substring(0,parseInt(r,10))),i.push(w(t,o,b(t)?s:""));else if("*"===r)Array.isArray(o)?o.filter(E).forEach((function(e){i.push(w(t,e,b(t)?s:""))})):Object.keys(o).forEach((function(e){E(o[e])&&i.push(w(t,o[e],e))}));else{const e=[];Array.isArray(o)?o.filter(E).forEach((function(s){e.push(w(t,s))})):Object.keys(o).forEach((function(s){E(o[s])&&(e.push(y(s)),e.push(w(t,o[s].toString())))})),b(t)?i.push(y(s)+"="+e.join(",")):0!==e.length&&i.push(e.join(","))}else";"===t?E(o)&&i.push(y(s)):""!==o||"&"!==t&&"?"!==t?""===o&&i.push(""):i.push(y(s)+"=");return i}(t,e,r[1],r[2]||r[3]))})),e&&"+"!==e){var i=",";return"?"===e?i="&":"#"!==e&&(i=e),(0!==o.length?e:"")+o.join(i)}return o.join(",")}return T(o)})),"/"===e?e:e.replace(/\/$/,"")}function v(e){let t,s=e.method.toUpperCase(),r=(e.url||"/").replace(/:([a-z]\w+)/g,"{$1}"),o=Object.assign({},e.headers),i=f(e,["method","baseUrl","url","headers","request","mediaType"]);const n=function(e){const t=e.match(m);return t?t.map(_).reduce(((e,t)=>e.concat(t)),[]):[]}(r);var a;r=(a=r,{expand:k.bind(null,a)}).expand(i),/^http/.test(r)||(r=e.baseUrl+r);const c=f(i,Object.keys(e).filter((e=>n.includes(e))).concat("baseUrl"));if(!/application\/octet-stream/i.test(o.accept)&&(e.mediaType.format&&(o.accept=o.accept.split(/,/).map((t=>t.replace(/application\/vnd(\.\w+)(\.v3)?(\.\w+)?(\+json)?$/,`application/vnd$1$2.${e.mediaType.format}`))).join(",")),r.endsWith("/graphql")&&e.mediaType.previews?.length)){const t=o.accept.match(/[\w-]+(?=-preview)/g)||[];o.accept=t.concat(e.mediaType.previews).map((t=>`application/vnd.github.${t}-preview${e.mediaType.format?`.${e.mediaType.format}`:"+json"}`)).join(",")}return["GET","HEAD"].includes(s)?r=function(e,t){const s=/\?/.test(e)?"&":"?",r=Object.keys(t);return 0===r.length?e:e+s+r.map((e=>"q"===e?"q="+t.q.split("+").map(encodeURIComponent).join("+"):`${e}=${encodeURIComponent(t[e])}`)).join("&")}(r,c):"data"in c?t=c.data:Object.keys(c).length&&(t=c),o["content-type"]||void 0===t||(o["content-type"]="application/json; charset=utf-8"),["PATCH","PUT"].includes(s)&&void 0===t&&(t=""),Object.assign({method:s,url:r,headers:o},void 0!==t?{body:t}:null,e.request?{request:e.request}:null)}function S(e,t,s){return v(g(e,t,s))}var A=function e(t,s){const r=g(t,s),o=S.bind(null,r);return Object.assign(o,{DEFAULTS:r,defaults:e.bind(null,r),merge:g.bind(null,r),parse:v})}(null,{method:"GET",baseUrl:"https://api.github.com",headers:{accept:"application/vnd.github.v3+json","user-agent":p},mediaType:{format:""}});class O extends Error{name;status;request;response;constructor(e,t,s){super(e),Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor),this.name="HttpError",this.status=Number.parseInt(t),Number.isNaN(this.status)&&(this.status=0),"response"in s&&(this.response=s.response);const r=Object.assign({},s.request);s.request.headers.authorization&&(r.headers=Object.assign({},s.request.headers,{authorization:s.request.headers.authorization.replace(/ .*$/," [REDACTED]")})),r.url=r.url.replace(/\bclient_secret=\w+/g,"client_secret=[REDACTED]").replace(/\baccess_token=\w+/g,"access_token=[REDACTED]"),this.request=r}}function P(e){const t=e.request&&e.request.log?e.request.log:console,s=!1!==e.request?.parseSuccessResponseBody;(function(e){if("object"!=typeof e||null===e)return!1;if("[object Object]"!==Object.prototype.toString.call(e))return!1;const t=Object.getPrototypeOf(e);if(null===t)return!0;const s=Object.prototype.hasOwnProperty.call(t,"constructor")&&t.constructor;return"function"==typeof s&&s instanceof s&&Function.prototype.call(s)===Function.prototype.call(e)}(e.body)||Array.isArray(e.body))&&(e.body=JSON.stringify(e.body));let r,o,i={},{fetch:n}=globalThis;if(e.request?.fetch&&(n=e.request.fetch),!n)throw new Error("fetch is not set. Please pass a fetch implementation as new Octokit({ request: { fetch }}). Learn more at https://github.com/octokit/octokit.js/#fetch-missing");return n(e.url,{method:e.method,body:e.body,redirect:e.request?.redirect,headers:Object.fromEntries(Object.entries(e.headers).map((([e,t])=>[e,String(t)]))),signal:e.request?.signal,...e.body&&{duplex:"half"}}).then((async n=>{o=n.url,r=n.status;for(const e of n.headers)i[e[0]]=e[1];if("deprecation"in i){const s=i.link&&i.link.match(/<([^>]+)>; rel="deprecation"/),r=s&&s.pop();t.warn(`[@octokit/request] "${e.method} ${e.url}" is deprecated. It is scheduled to be removed on ${i.sunset}${r?`. See ${r}`:""}`)}if(204!==r&&205!==r){if("HEAD"===e.method){if(r<400)return;throw new O(n.statusText,r,{response:{url:o,status:r,headers:i,data:void 0},request:e})}if(304===r)throw new O("Not modified",r,{response:{url:o,status:r,headers:i,data:await G(n)},request:e});if(r>=400){const t=await G(n),s=new O(function(e){if("string"==typeof e)return e;let t;t="documentation_url"in e?` - ${e.documentation_url}`:"";if("message"in e)return Array.isArray(e.errors)?`${e.message}: ${e.errors.map(JSON.stringify).join(", ")}${t}`:`${e.message}${t}`;return`Unknown error: ${JSON.stringify(e)}`}(t),r,{response:{url:o,status:r,headers:i,data:t},request:e});throw s}return s?await G(n):n.body}})).then((e=>({status:r,url:o,headers:i,data:e}))).catch((t=>{if(t instanceof O)throw t;if("AbortError"===t.name)throw t;let s=t.message;throw"TypeError"===t.name&&"cause"in t&&(t.cause instanceof Error?s=t.cause.message:"string"==typeof t.cause&&(s=t.cause)),new O(s,500,{request:e})}))}async function G(e){const t=e.headers.get("content-type");return/application\/json/.test(t)?e.json().catch((()=>e.text())).catch((()=>"")):!t||/^text\/|charset=utf-8$/.test(t)?e.text():function(e){return e.arrayBuffer()}(e)}var R=function e(t,s){const r=t.defaults(s);return Object.assign((function(t,s){const o=r.merge(t,s);if(!o.request||!o.request.hook)return P(r.parse(o));const i=(e,t)=>P(r.parse(r.merge(e,t)));return Object.assign(i,{endpoint:r,defaults:e.bind(null,r)}),o.request.hook(i,o)}),{endpoint:r,defaults:e.bind(null,r)})}(A,{headers:{"user-agent":`octokit-request.js/0.0.0-development ${r()}`}});var F=class extends Error{constructor(e,t,s){super("Request failed due to following response errors:\n"+s.errors.map((e=>` - ${e.message}`)).join("\n")),this.request=e,this.headers=t,this.response=s,this.errors=s.errors,this.data=s.data,Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)}name="GraphqlResponseError";errors;data},D=["method","baseUrl","url","headers","request","query","mediaType"],U=["query","method","url"],C=/\/api\/v3\/?$/;function I(e,t){const s=e.defaults(t);return Object.assign(((e,t)=>function(e,t,s){if(s){if("string"==typeof t&&"query"in s)return Promise.reject(new Error('[@octokit/graphql] "query" cannot be used as variable name'));for(const e in s)if(U.includes(e))return Promise.reject(new Error(`[@octokit/graphql] "${e}" cannot be used as variable name`))}const r="string"==typeof t?Object.assign({query:t},s):t,o=Object.keys(r).reduce(((e,t)=>D.includes(t)?(e[t]=r[t],e):(e.variables||(e.variables={}),e.variables[t]=r[t],e)),{}),i=r.baseUrl||e.endpoint.DEFAULTS.baseUrl;return C.test(i)&&(o.url=i.replace(C,"/api/graphql")),e(o).then((e=>{if(e.data.errors){const t={};for(const s of Object.keys(e.headers))t[s]=e.headers[s];throw new F(o,t,e.data)}return e.data.data}))}(s,e,t)),{defaults:I.bind(null,s),endpoint:s.endpoint})}I(R,{headers:{"user-agent":`octokit-graphql.js/0.0.0-development ${r()}`},method:"POST",url:"/graphql"});var L=/^v1\./,j=/^ghs_/,q=/^ghu_/;async function x(e){const t=3===e.split(/\./).length,s=L.test(e)||j.test(e),r=q.test(e);return{type:"token",token:e,tokenType:t?"app":s?"installation":r?"user-to-server":"oauth"}}async function z(e,t,s,r){const o=t.endpoint.merge(s,r);return o.headers.authorization=function(e){return 3===e.split(/\./).length?`bearer ${e}`:`token ${e}`}(e),t(o)}var $=function(e){if(!e)throw new Error("[@octokit/auth-token] No token passed to createTokenAuth");if("string"!=typeof e)throw new Error("[@octokit/auth-token] Token passed to createTokenAuth is not a string");return e=e.replace(/^(token|bearer) +/i,""),Object.assign(x.bind(null,e),{hook:z.bind(null,e)})};const B="6.1.2",W=()=>{},M=console.warn.bind(console),H=console.error.bind(console),N=`octokit-core.js/${B} ${r()}`;class V{static VERSION=B;static defaults(e){return class extends(this){constructor(...t){const s=t[0]||{};super("function"!=typeof e?Object.assign({},e,s,s.userAgent&&e.userAgent?{userAgent:`${s.userAgent} ${e.userAgent}`}:null):e(s))}}}static plugins=[];static plugin(...e){const t=this.plugins;return class extends(this){static plugins=t.concat(e.filter((e=>!t.includes(e))))}}constructor(e={}){const t=new u.Collection,s={baseUrl:R.endpoint.DEFAULTS.baseUrl,headers:{},request:Object.assign({},e.request,{hook:t.bind(null,"request")}),mediaType:{previews:[],format:""}};var r;if(s.headers["user-agent"]=e.userAgent?`${e.userAgent} ${N}`:N,e.baseUrl&&(s.baseUrl=e.baseUrl),e.previews&&(s.mediaType.previews=e.previews),e.timeZone&&(s.headers["time-zone"]=e.timeZone),this.request=R.defaults(s),this.graphql=(r=this.request,I(r,{method:"POST",url:"/graphql"})).defaults(s),this.log=Object.assign({debug:W,info:W,warn:M,error:H},e.log),this.hook=t,e.authStrategy){const{authStrategy:s,...r}=e,o=s(Object.assign({request:this.request,log:this.log,octokit:this,octokitOptions:r},e.auth));t.wrap("request",o.hook),this.auth=o}else if(e.auth){const s=$(e.auth);t.wrap("request",s.hook),this.auth=s}else this.auth=async()=>({type:"unauthenticated"});const o=this.constructor;for(let i=0;i<o.plugins.length;++i)Object.assign(this,o.plugins[i](this,e))}request;graphql;log;hook;auth}function K(e,t,s){const r="function"==typeof t?t.endpoint(s):e.request.endpoint(t,s),o="function"==typeof t?t:e.request,i=r.method,n=r.headers;let a=r.url;return{[Symbol.asyncIterator]:()=>({async next(){if(!a)return{done:!0};try{const e=function(e){if(!e.data)return{...e,data:[]};if(!("total_count"in e.data)||"url"in e.data)return e;const t=e.data.incomplete_results,s=e.data.repository_selection,r=e.data.total_count;delete e.data.incomplete_results,delete e.data.repository_selection,delete e.data.total_count;const o=Object.keys(e.data)[0],i=e.data[o];return e.data=i,void 0!==t&&(e.data.incomplete_results=t),void 0!==s&&(e.data.repository_selection=s),e.data.total_count=r,e}(await o({method:i,url:a,headers:n}));return a=((e.headers.link||"").match(/<([^>]+)>;\s*rel="next"/)||[])[1],{value:e}}catch(e){if(409!==e.status)throw e;return a="",{value:{status:200,headers:{},data:[]}}}}})}}function J(e,t,s,r){return"function"==typeof s&&(r=s,s=void 0),Y(e,[],K(e,t,s)[Symbol.asyncIterator](),r)}function Y(e,t,s,r){return s.next().then((o=>{if(o.done)return t;let i=!1;return t=t.concat(r?r(o.value,(function(){i=!0})):o.value.data),i?t:Y(e,t,s,r)}))}var Q=Object.assign(J,{iterator:K});function X(e){return{paginate:Object.assign(J.bind(null,e),{iterator:K.bind(null,e)})}}X.VERSION="0.0.0-development";var Z=class extends Error{constructor(e,t){super(((e,t)=>`The cursor at "${e.join(",")}" did not change its value "${t}" after a page transition. Please make sure your that your query is set up correctly.`)(e.pathInQuery,t)),this.pageInfo=e,this.cursorValue=t,Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)}name="MissingCursorChangeError"},ee=class extends Error{constructor(e){super(`No pageInfo property found in response. Please make sure to specify the pageInfo in your query. Response-Data: ${JSON.stringify(e,null,2)}`),this.response=e,Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)}name="MissingPageInfo"};function te(e){const t=se(e,"pageInfo");if(0===t.length)throw new ee(e);return t}var se=(e,t,s=[])=>{for(const o of Object.keys(e)){const i=[...s,o],n=e[o];if(n.hasOwnProperty(t))return i;if(r=n,"[object Object]"===Object.prototype.toString.call(r)){const e=se(n,t,i);if(e.length>0)return e}}var r;return[]},re=(e,t)=>t.reduce(((e,t)=>e[t]),e),oe=(e,t,s)=>{const r=t[t.length-1],o=[...t].slice(0,-1),i=re(e,o);i[r]="function"==typeof s?s(i[r]):s},ie=e=>e.hasOwnProperty("hasNextPage"),ne=e=>(t,s={})=>{let r=!0,o={...s};return{[Symbol.asyncIterator]:()=>({async next(){if(!r)return{done:!0,value:{}};const s=await e.graphql(t,o),i=(e=>{const t=te(e);return{pathInQuery:t,pageInfo:re(e,[...t,"pageInfo"])}})(s),n=(a=i.pageInfo,ie(a)?a.endCursor:a.startCursor);var a;if(r=(e=>ie(e)?e.hasNextPage:e.hasPreviousPage)(i.pageInfo),r&&n===o.cursor)throw new Z(i,n);return o={...o,cursor:n},{done:!1,value:s}}})}},ae=(e,t)=>{if(0===Object.keys(e).length)return Object.assign(e,t);const s=te(e),r=[...s,"nodes"],o=re(t,r);o&&oe(e,r,(e=>[...e,...o]));const i=[...s,"edges"],n=re(t,i);n&&oe(e,i,(e=>[...e,...n]));const a=[...s,"pageInfo"];return oe(e,a,re(t,a)),e},ce=e=>{const t=ne(e);return async(e,s={})=>{let r={};for await(const o of t(e,s))r=ae(r,o);return r}};const le="13.2.4";var ue={actions:{addCustomLabelsToSelfHostedRunnerForOrg:["POST /orgs/{org}/actions/runners/{runner_id}/labels"],addCustomLabelsToSelfHostedRunnerForRepo:["POST /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],addSelectedRepoToOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"],addSelectedRepoToOrgVariable:["PUT /orgs/{org}/actions/variables/{name}/repositories/{repository_id}"],approveWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/approve"],cancelWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel"],createEnvironmentVariable:["POST /repos/{owner}/{repo}/environments/{environment_name}/variables"],createOrUpdateEnvironmentSecret:["PUT /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}"],createOrUpdateOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/actions/secrets/{secret_name}"],createOrgVariable:["POST /orgs/{org}/actions/variables"],createRegistrationTokenForOrg:["POST /orgs/{org}/actions/runners/registration-token"],createRegistrationTokenForRepo:["POST /repos/{owner}/{repo}/actions/runners/registration-token"],createRemoveTokenForOrg:["POST /orgs/{org}/actions/runners/remove-token"],createRemoveTokenForRepo:["POST /repos/{owner}/{repo}/actions/runners/remove-token"],createRepoVariable:["POST /repos/{owner}/{repo}/actions/variables"],createWorkflowDispatch:["POST /repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches"],deleteActionsCacheById:["DELETE /repos/{owner}/{repo}/actions/caches/{cache_id}"],deleteActionsCacheByKey:["DELETE /repos/{owner}/{repo}/actions/caches{?key,ref}"],deleteArtifact:["DELETE /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],deleteEnvironmentSecret:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}"],deleteEnvironmentVariable:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}"],deleteOrgSecret:["DELETE /orgs/{org}/actions/secrets/{secret_name}"],deleteOrgVariable:["DELETE /orgs/{org}/actions/variables/{name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/actions/secrets/{secret_name}"],deleteRepoVariable:["DELETE /repos/{owner}/{repo}/actions/variables/{name}"],deleteSelfHostedRunnerFromOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}"],deleteSelfHostedRunnerFromRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}"],deleteWorkflowRun:["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}"],deleteWorkflowRunLogs:["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}/logs"],disableSelectedRepositoryGithubActionsOrganization:["DELETE /orgs/{org}/actions/permissions/repositories/{repository_id}"],disableWorkflow:["PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable"],downloadArtifact:["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}"],downloadJobLogsForWorkflowRun:["GET /repos/{owner}/{repo}/actions/jobs/{job_id}/logs"],downloadWorkflowRunAttemptLogs:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs"],downloadWorkflowRunLogs:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/logs"],enableSelectedRepositoryGithubActionsOrganization:["PUT /orgs/{org}/actions/permissions/repositories/{repository_id}"],enableWorkflow:["PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable"],forceCancelWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/force-cancel"],generateRunnerJitconfigForOrg:["POST /orgs/{org}/actions/runners/generate-jitconfig"],generateRunnerJitconfigForRepo:["POST /repos/{owner}/{repo}/actions/runners/generate-jitconfig"],getActionsCacheList:["GET /repos/{owner}/{repo}/actions/caches"],getActionsCacheUsage:["GET /repos/{owner}/{repo}/actions/cache/usage"],getActionsCacheUsageByRepoForOrg:["GET /orgs/{org}/actions/cache/usage-by-repository"],getActionsCacheUsageForOrg:["GET /orgs/{org}/actions/cache/usage"],getAllowedActionsOrganization:["GET /orgs/{org}/actions/permissions/selected-actions"],getAllowedActionsRepository:["GET /repos/{owner}/{repo}/actions/permissions/selected-actions"],getArtifact:["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],getCustomOidcSubClaimForRepo:["GET /repos/{owner}/{repo}/actions/oidc/customization/sub"],getEnvironmentPublicKey:["GET /repos/{owner}/{repo}/environments/{environment_name}/secrets/public-key"],getEnvironmentSecret:["GET /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}"],getEnvironmentVariable:["GET /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}"],getGithubActionsDefaultWorkflowPermissionsOrganization:["GET /orgs/{org}/actions/permissions/workflow"],getGithubActionsDefaultWorkflowPermissionsRepository:["GET /repos/{owner}/{repo}/actions/permissions/workflow"],getGithubActionsPermissionsOrganization:["GET /orgs/{org}/actions/permissions"],getGithubActionsPermissionsRepository:["GET /repos/{owner}/{repo}/actions/permissions"],getJobForWorkflowRun:["GET /repos/{owner}/{repo}/actions/jobs/{job_id}"],getOrgPublicKey:["GET /orgs/{org}/actions/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/actions/secrets/{secret_name}"],getOrgVariable:["GET /orgs/{org}/actions/variables/{name}"],getPendingDeploymentsForRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"],getRepoPermissions:["GET /repos/{owner}/{repo}/actions/permissions",{},{renamed:["actions","getGithubActionsPermissionsRepository"]}],getRepoPublicKey:["GET /repos/{owner}/{repo}/actions/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/actions/secrets/{secret_name}"],getRepoVariable:["GET /repos/{owner}/{repo}/actions/variables/{name}"],getReviewsForRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/approvals"],getSelfHostedRunnerForOrg:["GET /orgs/{org}/actions/runners/{runner_id}"],getSelfHostedRunnerForRepo:["GET /repos/{owner}/{repo}/actions/runners/{runner_id}"],getWorkflow:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}"],getWorkflowAccessToRepository:["GET /repos/{owner}/{repo}/actions/permissions/access"],getWorkflowRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}"],getWorkflowRunAttempt:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}"],getWorkflowRunUsage:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/timing"],getWorkflowUsage:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing"],listArtifactsForRepo:["GET /repos/{owner}/{repo}/actions/artifacts"],listEnvironmentSecrets:["GET /repos/{owner}/{repo}/environments/{environment_name}/secrets"],listEnvironmentVariables:["GET /repos/{owner}/{repo}/environments/{environment_name}/variables"],listJobsForWorkflowRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs"],listJobsForWorkflowRunAttempt:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs"],listLabelsForSelfHostedRunnerForOrg:["GET /orgs/{org}/actions/runners/{runner_id}/labels"],listLabelsForSelfHostedRunnerForRepo:["GET /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],listOrgSecrets:["GET /orgs/{org}/actions/secrets"],listOrgVariables:["GET /orgs/{org}/actions/variables"],listRepoOrganizationSecrets:["GET /repos/{owner}/{repo}/actions/organization-secrets"],listRepoOrganizationVariables:["GET /repos/{owner}/{repo}/actions/organization-variables"],listRepoSecrets:["GET /repos/{owner}/{repo}/actions/secrets"],listRepoVariables:["GET /repos/{owner}/{repo}/actions/variables"],listRepoWorkflows:["GET /repos/{owner}/{repo}/actions/workflows"],listRunnerApplicationsForOrg:["GET /orgs/{org}/actions/runners/downloads"],listRunnerApplicationsForRepo:["GET /repos/{owner}/{repo}/actions/runners/downloads"],listSelectedReposForOrgSecret:["GET /orgs/{org}/actions/secrets/{secret_name}/repositories"],listSelectedReposForOrgVariable:["GET /orgs/{org}/actions/variables/{name}/repositories"],listSelectedRepositoriesEnabledGithubActionsOrganization:["GET /orgs/{org}/actions/permissions/repositories"],listSelfHostedRunnersForOrg:["GET /orgs/{org}/actions/runners"],listSelfHostedRunnersForRepo:["GET /repos/{owner}/{repo}/actions/runners"],listWorkflowRunArtifacts:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts"],listWorkflowRuns:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs"],listWorkflowRunsForRepo:["GET /repos/{owner}/{repo}/actions/runs"],reRunJobForWorkflowRun:["POST /repos/{owner}/{repo}/actions/jobs/{job_id}/rerun"],reRunWorkflow:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun"],reRunWorkflowFailedJobs:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs"],removeAllCustomLabelsFromSelfHostedRunnerForOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}/labels"],removeAllCustomLabelsFromSelfHostedRunnerForRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],removeCustomLabelFromSelfHostedRunnerForOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}/labels/{name}"],removeCustomLabelFromSelfHostedRunnerForRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"],removeSelectedRepoFromOrgVariable:["DELETE /orgs/{org}/actions/variables/{name}/repositories/{repository_id}"],reviewCustomGatesForRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/deployment_protection_rule"],reviewPendingDeploymentsForRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"],setAllowedActionsOrganization:["PUT /orgs/{org}/actions/permissions/selected-actions"],setAllowedActionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions/selected-actions"],setCustomLabelsForSelfHostedRunnerForOrg:["PUT /orgs/{org}/actions/runners/{runner_id}/labels"],setCustomLabelsForSelfHostedRunnerForRepo:["PUT /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],setCustomOidcSubClaimForRepo:["PUT /repos/{owner}/{repo}/actions/oidc/customization/sub"],setGithubActionsDefaultWorkflowPermissionsOrganization:["PUT /orgs/{org}/actions/permissions/workflow"],setGithubActionsDefaultWorkflowPermissionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions/workflow"],setGithubActionsPermissionsOrganization:["PUT /orgs/{org}/actions/permissions"],setGithubActionsPermissionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}/repositories"],setSelectedReposForOrgVariable:["PUT /orgs/{org}/actions/variables/{name}/repositories"],setSelectedRepositoriesEnabledGithubActionsOrganization:["PUT /orgs/{org}/actions/permissions/repositories"],setWorkflowAccessToRepository:["PUT /repos/{owner}/{repo}/actions/permissions/access"],updateEnvironmentVariable:["PATCH /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}"],updateOrgVariable:["PATCH /orgs/{org}/actions/variables/{name}"],updateRepoVariable:["PATCH /repos/{owner}/{repo}/actions/variables/{name}"]},activity:{checkRepoIsStarredByAuthenticatedUser:["GET /user/starred/{owner}/{repo}"],deleteRepoSubscription:["DELETE /repos/{owner}/{repo}/subscription"],deleteThreadSubscription:["DELETE /notifications/threads/{thread_id}/subscription"],getFeeds:["GET /feeds"],getRepoSubscription:["GET /repos/{owner}/{repo}/subscription"],getThread:["GET /notifications/threads/{thread_id}"],getThreadSubscriptionForAuthenticatedUser:["GET /notifications/threads/{thread_id}/subscription"],listEventsForAuthenticatedUser:["GET /users/{username}/events"],listNotificationsForAuthenticatedUser:["GET /notifications"],listOrgEventsForAuthenticatedUser:["GET /users/{username}/events/orgs/{org}"],listPublicEvents:["GET /events"],listPublicEventsForRepoNetwork:["GET /networks/{owner}/{repo}/events"],listPublicEventsForUser:["GET /users/{username}/events/public"],listPublicOrgEvents:["GET /orgs/{org}/events"],listReceivedEventsForUser:["GET /users/{username}/received_events"],listReceivedPublicEventsForUser:["GET /users/{username}/received_events/public"],listRepoEvents:["GET /repos/{owner}/{repo}/events"],listRepoNotificationsForAuthenticatedUser:["GET /repos/{owner}/{repo}/notifications"],listReposStarredByAuthenticatedUser:["GET /user/starred"],listReposStarredByUser:["GET /users/{username}/starred"],listReposWatchedByUser:["GET /users/{username}/subscriptions"],listStargazersForRepo:["GET /repos/{owner}/{repo}/stargazers"],listWatchedReposForAuthenticatedUser:["GET /user/subscriptions"],listWatchersForRepo:["GET /repos/{owner}/{repo}/subscribers"],markNotificationsAsRead:["PUT /notifications"],markRepoNotificationsAsRead:["PUT /repos/{owner}/{repo}/notifications"],markThreadAsDone:["DELETE /notifications/threads/{thread_id}"],markThreadAsRead:["PATCH /notifications/threads/{thread_id}"],setRepoSubscription:["PUT /repos/{owner}/{repo}/subscription"],setThreadSubscription:["PUT /notifications/threads/{thread_id}/subscription"],starRepoForAuthenticatedUser:["PUT /user/starred/{owner}/{repo}"],unstarRepoForAuthenticatedUser:["DELETE /user/starred/{owner}/{repo}"]},apps:{addRepoToInstallation:["PUT /user/installations/{installation_id}/repositories/{repository_id}",{},{renamed:["apps","addRepoToInstallationForAuthenticatedUser"]}],addRepoToInstallationForAuthenticatedUser:["PUT /user/installations/{installation_id}/repositories/{repository_id}"],checkToken:["POST /applications/{client_id}/token"],createFromManifest:["POST /app-manifests/{code}/conversions"],createInstallationAccessToken:["POST /app/installations/{installation_id}/access_tokens"],deleteAuthorization:["DELETE /applications/{client_id}/grant"],deleteInstallation:["DELETE /app/installations/{installation_id}"],deleteToken:["DELETE /applications/{client_id}/token"],getAuthenticated:["GET /app"],getBySlug:["GET /apps/{app_slug}"],getInstallation:["GET /app/installations/{installation_id}"],getOrgInstallation:["GET /orgs/{org}/installation"],getRepoInstallation:["GET /repos/{owner}/{repo}/installation"],getSubscriptionPlanForAccount:["GET /marketplace_listing/accounts/{account_id}"],getSubscriptionPlanForAccountStubbed:["GET /marketplace_listing/stubbed/accounts/{account_id}"],getUserInstallation:["GET /users/{username}/installation"],getWebhookConfigForApp:["GET /app/hook/config"],getWebhookDelivery:["GET /app/hook/deliveries/{delivery_id}"],listAccountsForPlan:["GET /marketplace_listing/plans/{plan_id}/accounts"],listAccountsForPlanStubbed:["GET /marketplace_listing/stubbed/plans/{plan_id}/accounts"],listInstallationReposForAuthenticatedUser:["GET /user/installations/{installation_id}/repositories"],listInstallationRequestsForAuthenticatedApp:["GET /app/installation-requests"],listInstallations:["GET /app/installations"],listInstallationsForAuthenticatedUser:["GET /user/installations"],listPlans:["GET /marketplace_listing/plans"],listPlansStubbed:["GET /marketplace_listing/stubbed/plans"],listReposAccessibleToInstallation:["GET /installation/repositories"],listSubscriptionsForAuthenticatedUser:["GET /user/marketplace_purchases"],listSubscriptionsForAuthenticatedUserStubbed:["GET /user/marketplace_purchases/stubbed"],listWebhookDeliveries:["GET /app/hook/deliveries"],redeliverWebhookDelivery:["POST /app/hook/deliveries/{delivery_id}/attempts"],removeRepoFromInstallation:["DELETE /user/installations/{installation_id}/repositories/{repository_id}",{},{renamed:["apps","removeRepoFromInstallationForAuthenticatedUser"]}],removeRepoFromInstallationForAuthenticatedUser:["DELETE /user/installations/{installation_id}/repositories/{repository_id}"],resetToken:["PATCH /applications/{client_id}/token"],revokeInstallationAccessToken:["DELETE /installation/token"],scopeToken:["POST /applications/{client_id}/token/scoped"],suspendInstallation:["PUT /app/installations/{installation_id}/suspended"],unsuspendInstallation:["DELETE /app/installations/{installation_id}/suspended"],updateWebhookConfigForApp:["PATCH /app/hook/config"]},billing:{getGithubActionsBillingOrg:["GET /orgs/{org}/settings/billing/actions"],getGithubActionsBillingUser:["GET /users/{username}/settings/billing/actions"],getGithubPackagesBillingOrg:["GET /orgs/{org}/settings/billing/packages"],getGithubPackagesBillingUser:["GET /users/{username}/settings/billing/packages"],getSharedStorageBillingOrg:["GET /orgs/{org}/settings/billing/shared-storage"],getSharedStorageBillingUser:["GET /users/{username}/settings/billing/shared-storage"]},checks:{create:["POST /repos/{owner}/{repo}/check-runs"],createSuite:["POST /repos/{owner}/{repo}/check-suites"],get:["GET /repos/{owner}/{repo}/check-runs/{check_run_id}"],getSuite:["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}"],listAnnotations:["GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations"],listForRef:["GET /repos/{owner}/{repo}/commits/{ref}/check-runs"],listForSuite:["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs"],listSuitesForRef:["GET /repos/{owner}/{repo}/commits/{ref}/check-suites"],rerequestRun:["POST /repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest"],rerequestSuite:["POST /repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest"],setSuitesPreferences:["PATCH /repos/{owner}/{repo}/check-suites/preferences"],update:["PATCH /repos/{owner}/{repo}/check-runs/{check_run_id}"]},codeScanning:{deleteAnalysis:["DELETE /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}{?confirm_delete}"],getAlert:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}",{},{renamedParameters:{alert_id:"alert_number"}}],getAnalysis:["GET /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}"],getCodeqlDatabase:["GET /repos/{owner}/{repo}/code-scanning/codeql/databases/{language}"],getDefaultSetup:["GET /repos/{owner}/{repo}/code-scanning/default-setup"],getSarif:["GET /repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}"],listAlertInstances:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances"],listAlertsForOrg:["GET /orgs/{org}/code-scanning/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/code-scanning/alerts"],listAlertsInstances:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances",{},{renamed:["codeScanning","listAlertInstances"]}],listCodeqlDatabases:["GET /repos/{owner}/{repo}/code-scanning/codeql/databases"],listRecentAnalyses:["GET /repos/{owner}/{repo}/code-scanning/analyses"],updateAlert:["PATCH /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}"],updateDefaultSetup:["PATCH /repos/{owner}/{repo}/code-scanning/default-setup"],uploadSarif:["POST /repos/{owner}/{repo}/code-scanning/sarifs"]},codesOfConduct:{getAllCodesOfConduct:["GET /codes_of_conduct"],getConductCode:["GET /codes_of_conduct/{key}"]},codespaces:{addRepositoryForSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}/repositories/{repository_id}"],addSelectedRepoToOrgSecret:["PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}"],checkPermissionsForDevcontainer:["GET /repos/{owner}/{repo}/codespaces/permissions_check"],codespaceMachinesForAuthenticatedUser:["GET /user/codespaces/{codespace_name}/machines"],createForAuthenticatedUser:["POST /user/codespaces"],createOrUpdateOrgSecret:["PUT /orgs/{org}/codespaces/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],createOrUpdateSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}"],createWithPrForAuthenticatedUser:["POST /repos/{owner}/{repo}/pulls/{pull_number}/codespaces"],createWithRepoForAuthenticatedUser:["POST /repos/{owner}/{repo}/codespaces"],deleteForAuthenticatedUser:["DELETE /user/codespaces/{codespace_name}"],deleteFromOrganization:["DELETE /orgs/{org}/members/{username}/codespaces/{codespace_name}"],deleteOrgSecret:["DELETE /orgs/{org}/codespaces/secrets/{secret_name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],deleteSecretForAuthenticatedUser:["DELETE /user/codespaces/secrets/{secret_name}"],exportForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/exports"],getCodespacesForUserInOrg:["GET /orgs/{org}/members/{username}/codespaces"],getExportDetailsForAuthenticatedUser:["GET /user/codespaces/{codespace_name}/exports/{export_id}"],getForAuthenticatedUser:["GET /user/codespaces/{codespace_name}"],getOrgPublicKey:["GET /orgs/{org}/codespaces/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/codespaces/secrets/{secret_name}"],getPublicKeyForAuthenticatedUser:["GET /user/codespaces/secrets/public-key"],getRepoPublicKey:["GET /repos/{owner}/{repo}/codespaces/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],getSecretForAuthenticatedUser:["GET /user/codespaces/secrets/{secret_name}"],listDevcontainersInRepositoryForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/devcontainers"],listForAuthenticatedUser:["GET /user/codespaces"],listInOrganization:["GET /orgs/{org}/codespaces",{},{renamedParameters:{org_id:"org"}}],listInRepositoryForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces"],listOrgSecrets:["GET /orgs/{org}/codespaces/secrets"],listRepoSecrets:["GET /repos/{owner}/{repo}/codespaces/secrets"],listRepositoriesForSecretForAuthenticatedUser:["GET /user/codespaces/secrets/{secret_name}/repositories"],listSecretsForAuthenticatedUser:["GET /user/codespaces/secrets"],listSelectedReposForOrgSecret:["GET /orgs/{org}/codespaces/secrets/{secret_name}/repositories"],preFlightWithRepoForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/new"],publishForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/publish"],removeRepositoryForSecretForAuthenticatedUser:["DELETE /user/codespaces/secrets/{secret_name}/repositories/{repository_id}"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}"],repoMachinesForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/machines"],setRepositoriesForSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}/repositories"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories"],startForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/start"],stopForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/stop"],stopInOrganization:["POST /orgs/{org}/members/{username}/codespaces/{codespace_name}/stop"],updateForAuthenticatedUser:["PATCH /user/codespaces/{codespace_name}"]},copilot:{addCopilotSeatsForTeams:["POST /orgs/{org}/copilot/billing/selected_teams"],addCopilotSeatsForUsers:["POST /orgs/{org}/copilot/billing/selected_users"],cancelCopilotSeatAssignmentForTeams:["DELETE /orgs/{org}/copilot/billing/selected_teams"],cancelCopilotSeatAssignmentForUsers:["DELETE /orgs/{org}/copilot/billing/selected_users"],getCopilotOrganizationDetails:["GET /orgs/{org}/copilot/billing"],getCopilotSeatDetailsForUser:["GET /orgs/{org}/members/{username}/copilot"],listCopilotSeats:["GET /orgs/{org}/copilot/billing/seats"],usageMetricsForEnterprise:["GET /enterprises/{enterprise}/copilot/usage"],usageMetricsForOrg:["GET /orgs/{org}/copilot/usage"],usageMetricsForTeam:["GET /orgs/{org}/team/{team_slug}/copilot/usage"]},dependabot:{addSelectedRepoToOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}"],createOrUpdateOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],deleteOrgSecret:["DELETE /orgs/{org}/dependabot/secrets/{secret_name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],getAlert:["GET /repos/{owner}/{repo}/dependabot/alerts/{alert_number}"],getOrgPublicKey:["GET /orgs/{org}/dependabot/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/dependabot/secrets/{secret_name}"],getRepoPublicKey:["GET /repos/{owner}/{repo}/dependabot/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],listAlertsForEnterprise:["GET /enterprises/{enterprise}/dependabot/alerts"],listAlertsForOrg:["GET /orgs/{org}/dependabot/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/dependabot/alerts"],listOrgSecrets:["GET /orgs/{org}/dependabot/secrets"],listRepoSecrets:["GET /repos/{owner}/{repo}/dependabot/secrets"],listSelectedReposForOrgSecret:["GET /orgs/{org}/dependabot/secrets/{secret_name}/repositories"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories"],updateAlert:["PATCH /repos/{owner}/{repo}/dependabot/alerts/{alert_number}"]},dependencyGraph:{createRepositorySnapshot:["POST /repos/{owner}/{repo}/dependency-graph/snapshots"],diffRange:["GET /repos/{owner}/{repo}/dependency-graph/compare/{basehead}"],exportSbom:["GET /repos/{owner}/{repo}/dependency-graph/sbom"]},emojis:{get:["GET /emojis"]},gists:{checkIsStarred:["GET /gists/{gist_id}/star"],create:["POST /gists"],createComment:["POST /gists/{gist_id}/comments"],delete:["DELETE /gists/{gist_id}"],deleteComment:["DELETE /gists/{gist_id}/comments/{comment_id}"],fork:["POST /gists/{gist_id}/forks"],get:["GET /gists/{gist_id}"],getComment:["GET /gists/{gist_id}/comments/{comment_id}"],getRevision:["GET /gists/{gist_id}/{sha}"],list:["GET /gists"],listComments:["GET /gists/{gist_id}/comments"],listCommits:["GET /gists/{gist_id}/commits"],listForUser:["GET /users/{username}/gists"],listForks:["GET /gists/{gist_id}/forks"],listPublic:["GET /gists/public"],listStarred:["GET /gists/starred"],star:["PUT /gists/{gist_id}/star"],unstar:["DELETE /gists/{gist_id}/star"],update:["PATCH /gists/{gist_id}"],updateComment:["PATCH /gists/{gist_id}/comments/{comment_id}"]},git:{createBlob:["POST /repos/{owner}/{repo}/git/blobs"],createCommit:["POST /repos/{owner}/{repo}/git/commits"],createRef:["POST /repos/{owner}/{repo}/git/refs"],createTag:["POST /repos/{owner}/{repo}/git/tags"],createTree:["POST /repos/{owner}/{repo}/git/trees"],deleteRef:["DELETE /repos/{owner}/{repo}/git/refs/{ref}"],getBlob:["GET /repos/{owner}/{repo}/git/blobs/{file_sha}"],getCommit:["GET /repos/{owner}/{repo}/git/commits/{commit_sha}"],getRef:["GET /repos/{owner}/{repo}/git/ref/{ref}"],getTag:["GET /repos/{owner}/{repo}/git/tags/{tag_sha}"],getTree:["GET /repos/{owner}/{repo}/git/trees/{tree_sha}"],listMatchingRefs:["GET /repos/{owner}/{repo}/git/matching-refs/{ref}"],updateRef:["PATCH /repos/{owner}/{repo}/git/refs/{ref}"]},gitignore:{getAllTemplates:["GET /gitignore/templates"],getTemplate:["GET /gitignore/templates/{name}"]},interactions:{getRestrictionsForAuthenticatedUser:["GET /user/interaction-limits"],getRestrictionsForOrg:["GET /orgs/{org}/interaction-limits"],getRestrictionsForRepo:["GET /repos/{owner}/{repo}/interaction-limits"],getRestrictionsForYourPublicRepos:["GET /user/interaction-limits",{},{renamed:["interactions","getRestrictionsForAuthenticatedUser"]}],removeRestrictionsForAuthenticatedUser:["DELETE /user/interaction-limits"],removeRestrictionsForOrg:["DELETE /orgs/{org}/interaction-limits"],removeRestrictionsForRepo:["DELETE /repos/{owner}/{repo}/interaction-limits"],removeRestrictionsForYourPublicRepos:["DELETE /user/interaction-limits",{},{renamed:["interactions","removeRestrictionsForAuthenticatedUser"]}],setRestrictionsForAuthenticatedUser:["PUT /user/interaction-limits"],setRestrictionsForOrg:["PUT /orgs/{org}/interaction-limits"],setRestrictionsForRepo:["PUT /repos/{owner}/{repo}/interaction-limits"],setRestrictionsForYourPublicRepos:["PUT /user/interaction-limits",{},{renamed:["interactions","setRestrictionsForAuthenticatedUser"]}]},issues:{addAssignees:["POST /repos/{owner}/{repo}/issues/{issue_number}/assignees"],addLabels:["POST /repos/{owner}/{repo}/issues/{issue_number}/labels"],checkUserCanBeAssigned:["GET /repos/{owner}/{repo}/assignees/{assignee}"],checkUserCanBeAssignedToIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/assignees/{assignee}"],create:["POST /repos/{owner}/{repo}/issues"],createComment:["POST /repos/{owner}/{repo}/issues/{issue_number}/comments"],createLabel:["POST /repos/{owner}/{repo}/labels"],createMilestone:["POST /repos/{owner}/{repo}/milestones"],deleteComment:["DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}"],deleteLabel:["DELETE /repos/{owner}/{repo}/labels/{name}"],deleteMilestone:["DELETE /repos/{owner}/{repo}/milestones/{milestone_number}"],get:["GET /repos/{owner}/{repo}/issues/{issue_number}"],getComment:["GET /repos/{owner}/{repo}/issues/comments/{comment_id}"],getEvent:["GET /repos/{owner}/{repo}/issues/events/{event_id}"],getLabel:["GET /repos/{owner}/{repo}/labels/{name}"],getMilestone:["GET /repos/{owner}/{repo}/milestones/{milestone_number}"],list:["GET /issues"],listAssignees:["GET /repos/{owner}/{repo}/assignees"],listComments:["GET /repos/{owner}/{repo}/issues/{issue_number}/comments"],listCommentsForRepo:["GET /repos/{owner}/{repo}/issues/comments"],listEvents:["GET /repos/{owner}/{repo}/issues/{issue_number}/events"],listEventsForRepo:["GET /repos/{owner}/{repo}/issues/events"],listEventsForTimeline:["GET /repos/{owner}/{repo}/issues/{issue_number}/timeline"],listForAuthenticatedUser:["GET /user/issues"],listForOrg:["GET /orgs/{org}/issues"],listForRepo:["GET /repos/{owner}/{repo}/issues"],listLabelsForMilestone:["GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels"],listLabelsForRepo:["GET /repos/{owner}/{repo}/labels"],listLabelsOnIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/labels"],listMilestones:["GET /repos/{owner}/{repo}/milestones"],lock:["PUT /repos/{owner}/{repo}/issues/{issue_number}/lock"],removeAllLabels:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels"],removeAssignees:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/assignees"],removeLabel:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels/{name}"],setLabels:["PUT /repos/{owner}/{repo}/issues/{issue_number}/labels"],unlock:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/lock"],update:["PATCH /repos/{owner}/{repo}/issues/{issue_number}"],updateComment:["PATCH /repos/{owner}/{repo}/issues/comments/{comment_id}"],updateLabel:["PATCH /repos/{owner}/{repo}/labels/{name}"],updateMilestone:["PATCH /repos/{owner}/{repo}/milestones/{milestone_number}"]},licenses:{get:["GET /licenses/{license}"],getAllCommonlyUsed:["GET /licenses"],getForRepo:["GET /repos/{owner}/{repo}/license"]},markdown:{render:["POST /markdown"],renderRaw:["POST /markdown/raw",{headers:{"content-type":"text/plain; charset=utf-8"}}]},meta:{get:["GET /meta"],getAllVersions:["GET /versions"],getOctocat:["GET /octocat"],getZen:["GET /zen"],root:["GET /"]},migrations:{deleteArchiveForAuthenticatedUser:["DELETE /user/migrations/{migration_id}/archive"],deleteArchiveForOrg:["DELETE /orgs/{org}/migrations/{migration_id}/archive"],downloadArchiveForOrg:["GET /orgs/{org}/migrations/{migration_id}/archive"],getArchiveForAuthenticatedUser:["GET /user/migrations/{migration_id}/archive"],getStatusForAuthenticatedUser:["GET /user/migrations/{migration_id}"],getStatusForOrg:["GET /orgs/{org}/migrations/{migration_id}"],listForAuthenticatedUser:["GET /user/migrations"],listForOrg:["GET /orgs/{org}/migrations"],listReposForAuthenticatedUser:["GET /user/migrations/{migration_id}/repositories"],listReposForOrg:["GET /orgs/{org}/migrations/{migration_id}/repositories"],listReposForUser:["GET /user/migrations/{migration_id}/repositories",{},{renamed:["migrations","listReposForAuthenticatedUser"]}],startForAuthenticatedUser:["POST /user/migrations"],startForOrg:["POST /orgs/{org}/migrations"],unlockRepoForAuthenticatedUser:["DELETE /user/migrations/{migration_id}/repos/{repo_name}/lock"],unlockRepoForOrg:["DELETE /orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock"]},oidc:{getOidcCustomSubTemplateForOrg:["GET /orgs/{org}/actions/oidc/customization/sub"],updateOidcCustomSubTemplateForOrg:["PUT /orgs/{org}/actions/oidc/customization/sub"]},orgs:{addSecurityManagerTeam:["PUT /orgs/{org}/security-managers/teams/{team_slug}"],assignTeamToOrgRole:["PUT /orgs/{org}/organization-roles/teams/{team_slug}/{role_id}"],assignUserToOrgRole:["PUT /orgs/{org}/organization-roles/users/{username}/{role_id}"],blockUser:["PUT /orgs/{org}/blocks/{username}"],cancelInvitation:["DELETE /orgs/{org}/invitations/{invitation_id}"],checkBlockedUser:["GET /orgs/{org}/blocks/{username}"],checkMembershipForUser:["GET /orgs/{org}/members/{username}"],checkPublicMembershipForUser:["GET /orgs/{org}/public_members/{username}"],convertMemberToOutsideCollaborator:["PUT /orgs/{org}/outside_collaborators/{username}"],createCustomOrganizationRole:["POST /orgs/{org}/organization-roles"],createInvitation:["POST /orgs/{org}/invitations"],createOrUpdateCustomProperties:["PATCH /orgs/{org}/properties/schema"],createOrUpdateCustomPropertiesValuesForRepos:["PATCH /orgs/{org}/properties/values"],createOrUpdateCustomProperty:["PUT /orgs/{org}/properties/schema/{custom_property_name}"],createWebhook:["POST /orgs/{org}/hooks"],delete:["DELETE /orgs/{org}"],deleteCustomOrganizationRole:["DELETE /orgs/{org}/organization-roles/{role_id}"],deleteWebhook:["DELETE /orgs/{org}/hooks/{hook_id}"],enableOrDisableSecurityProductOnAllOrgRepos:["POST /orgs/{org}/{security_product}/{enablement}"],get:["GET /orgs/{org}"],getAllCustomProperties:["GET /orgs/{org}/properties/schema"],getCustomProperty:["GET /orgs/{org}/properties/schema/{custom_property_name}"],getMembershipForAuthenticatedUser:["GET /user/memberships/orgs/{org}"],getMembershipForUser:["GET /orgs/{org}/memberships/{username}"],getOrgRole:["GET /orgs/{org}/organization-roles/{role_id}"],getWebhook:["GET /orgs/{org}/hooks/{hook_id}"],getWebhookConfigForOrg:["GET /orgs/{org}/hooks/{hook_id}/config"],getWebhookDelivery:["GET /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}"],list:["GET /organizations"],listAppInstallations:["GET /orgs/{org}/installations"],listBlockedUsers:["GET /orgs/{org}/blocks"],listCustomPropertiesValuesForRepos:["GET /orgs/{org}/properties/values"],listFailedInvitations:["GET /orgs/{org}/failed_invitations"],listForAuthenticatedUser:["GET /user/orgs"],listForUser:["GET /users/{username}/orgs"],listInvitationTeams:["GET /orgs/{org}/invitations/{invitation_id}/teams"],listMembers:["GET /orgs/{org}/members"],listMembershipsForAuthenticatedUser:["GET /user/memberships/orgs"],listOrgRoleTeams:["GET /orgs/{org}/organization-roles/{role_id}/teams"],listOrgRoleUsers:["GET /orgs/{org}/organization-roles/{role_id}/users"],listOrgRoles:["GET /orgs/{org}/organization-roles"],listOrganizationFineGrainedPermissions:["GET /orgs/{org}/organization-fine-grained-permissions"],listOutsideCollaborators:["GET /orgs/{org}/outside_collaborators"],listPatGrantRepositories:["GET /orgs/{org}/personal-access-tokens/{pat_id}/repositories"],listPatGrantRequestRepositories:["GET /orgs/{org}/personal-access-token-requests/{pat_request_id}/repositories"],listPatGrantRequests:["GET /orgs/{org}/personal-access-token-requests"],listPatGrants:["GET /orgs/{org}/personal-access-tokens"],listPendingInvitations:["GET /orgs/{org}/invitations"],listPublicMembers:["GET /orgs/{org}/public_members"],listSecurityManagerTeams:["GET /orgs/{org}/security-managers"],listWebhookDeliveries:["GET /orgs/{org}/hooks/{hook_id}/deliveries"],listWebhooks:["GET /orgs/{org}/hooks"],patchCustomOrganizationRole:["PATCH /orgs/{org}/organization-roles/{role_id}"],pingWebhook:["POST /orgs/{org}/hooks/{hook_id}/pings"],redeliverWebhookDelivery:["POST /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"],removeCustomProperty:["DELETE /orgs/{org}/properties/schema/{custom_property_name}"],removeMember:["DELETE /orgs/{org}/members/{username}"],removeMembershipForUser:["DELETE /orgs/{org}/memberships/{username}"],removeOutsideCollaborator:["DELETE /orgs/{org}/outside_collaborators/{username}"],removePublicMembershipForAuthenticatedUser:["DELETE /orgs/{org}/public_members/{username}"],removeSecurityManagerTeam:["DELETE /orgs/{org}/security-managers/teams/{team_slug}"],reviewPatGrantRequest:["POST /orgs/{org}/personal-access-token-requests/{pat_request_id}"],reviewPatGrantRequestsInBulk:["POST /orgs/{org}/personal-access-token-requests"],revokeAllOrgRolesTeam:["DELETE /orgs/{org}/organization-roles/teams/{team_slug}"],revokeAllOrgRolesUser:["DELETE /orgs/{org}/organization-roles/users/{username}"],revokeOrgRoleTeam:["DELETE /orgs/{org}/organization-roles/teams/{team_slug}/{role_id}"],revokeOrgRoleUser:["DELETE /orgs/{org}/organization-roles/users/{username}/{role_id}"],setMembershipForUser:["PUT /orgs/{org}/memberships/{username}"],setPublicMembershipForAuthenticatedUser:["PUT /orgs/{org}/public_members/{username}"],unblockUser:["DELETE /orgs/{org}/blocks/{username}"],update:["PATCH /orgs/{org}"],updateMembershipForAuthenticatedUser:["PATCH /user/memberships/orgs/{org}"],updatePatAccess:["POST /orgs/{org}/personal-access-tokens/{pat_id}"],updatePatAccesses:["POST /orgs/{org}/personal-access-tokens"],updateWebhook:["PATCH /orgs/{org}/hooks/{hook_id}"],updateWebhookConfigForOrg:["PATCH /orgs/{org}/hooks/{hook_id}/config"]},packages:{deletePackageForAuthenticatedUser:["DELETE /user/packages/{package_type}/{package_name}"],deletePackageForOrg:["DELETE /orgs/{org}/packages/{package_type}/{package_name}"],deletePackageForUser:["DELETE /users/{username}/packages/{package_type}/{package_name}"],deletePackageVersionForAuthenticatedUser:["DELETE /user/packages/{package_type}/{package_name}/versions/{package_version_id}"],deletePackageVersionForOrg:["DELETE /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"],deletePackageVersionForUser:["DELETE /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"],getAllPackageVersionsForAPackageOwnedByAnOrg:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions",{},{renamed:["packages","getAllPackageVersionsForPackageOwnedByOrg"]}],getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions",{},{renamed:["packages","getAllPackageVersionsForPackageOwnedByAuthenticatedUser"]}],getAllPackageVersionsForPackageOwnedByAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions"],getAllPackageVersionsForPackageOwnedByOrg:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions"],getAllPackageVersionsForPackageOwnedByUser:["GET /users/{username}/packages/{package_type}/{package_name}/versions"],getPackageForAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}"],getPackageForOrganization:["GET /orgs/{org}/packages/{package_type}/{package_name}"],getPackageForUser:["GET /users/{username}/packages/{package_type}/{package_name}"],getPackageVersionForAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions/{package_version_id}"],getPackageVersionForOrganization:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"],getPackageVersionForUser:["GET /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"],listDockerMigrationConflictingPackagesForAuthenticatedUser:["GET /user/docker/conflicts"],listDockerMigrationConflictingPackagesForOrganization:["GET /orgs/{org}/docker/conflicts"],listDockerMigrationConflictingPackagesForUser:["GET /users/{username}/docker/conflicts"],listPackagesForAuthenticatedUser:["GET /user/packages"],listPackagesForOrganization:["GET /orgs/{org}/packages"],listPackagesForUser:["GET /users/{username}/packages"],restorePackageForAuthenticatedUser:["POST /user/packages/{package_type}/{package_name}/restore{?token}"],restorePackageForOrg:["POST /orgs/{org}/packages/{package_type}/{package_name}/restore{?token}"],restorePackageForUser:["POST /users/{username}/packages/{package_type}/{package_name}/restore{?token}"],restorePackageVersionForAuthenticatedUser:["POST /user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"],restorePackageVersionForOrg:["POST /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"],restorePackageVersionForUser:["POST /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"]},projects:{addCollaborator:["PUT /projects/{project_id}/collaborators/{username}"],createCard:["POST /projects/columns/{column_id}/cards"],createColumn:["POST /projects/{project_id}/columns"],createForAuthenticatedUser:["POST /user/projects"],createForOrg:["POST /orgs/{org}/projects"],createForRepo:["POST /repos/{owner}/{repo}/projects"],delete:["DELETE /projects/{project_id}"],deleteCard:["DELETE /projects/columns/cards/{card_id}"],deleteColumn:["DELETE /projects/columns/{column_id}"],get:["GET /projects/{project_id}"],getCard:["GET /projects/columns/cards/{card_id}"],getColumn:["GET /projects/columns/{column_id}"],getPermissionForUser:["GET /projects/{project_id}/collaborators/{username}/permission"],listCards:["GET /projects/columns/{column_id}/cards"],listCollaborators:["GET /projects/{project_id}/collaborators"],listColumns:["GET /projects/{project_id}/columns"],listForOrg:["GET /orgs/{org}/projects"],listForRepo:["GET /repos/{owner}/{repo}/projects"],listForUser:["GET /users/{username}/projects"],moveCard:["POST /projects/columns/cards/{card_id}/moves"],moveColumn:["POST /projects/columns/{column_id}/moves"],removeCollaborator:["DELETE /projects/{project_id}/collaborators/{username}"],update:["PATCH /projects/{project_id}"],updateCard:["PATCH /projects/columns/cards/{card_id}"],updateColumn:["PATCH /projects/columns/{column_id}"]},pulls:{checkIfMerged:["GET /repos/{owner}/{repo}/pulls/{pull_number}/merge"],create:["POST /repos/{owner}/{repo}/pulls"],createReplyForReviewComment:["POST /repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies"],createReview:["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],createReviewComment:["POST /repos/{owner}/{repo}/pulls/{pull_number}/comments"],deletePendingReview:["DELETE /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],deleteReviewComment:["DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}"],dismissReview:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals"],get:["GET /repos/{owner}/{repo}/pulls/{pull_number}"],getReview:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],getReviewComment:["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}"],list:["GET /repos/{owner}/{repo}/pulls"],listCommentsForReview:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments"],listCommits:["GET /repos/{owner}/{repo}/pulls/{pull_number}/commits"],listFiles:["GET /repos/{owner}/{repo}/pulls/{pull_number}/files"],listRequestedReviewers:["GET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],listReviewComments:["GET /repos/{owner}/{repo}/pulls/{pull_number}/comments"],listReviewCommentsForRepo:["GET /repos/{owner}/{repo}/pulls/comments"],listReviews:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],merge:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/merge"],removeRequestedReviewers:["DELETE /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],requestReviewers:["POST /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],submitReview:["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events"],update:["PATCH /repos/{owner}/{repo}/pulls/{pull_number}"],updateBranch:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/update-branch"],updateReview:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],updateReviewComment:["PATCH /repos/{owner}/{repo}/pulls/comments/{comment_id}"]},rateLimit:{get:["GET /rate_limit"]},reactions:{createForCommitComment:["POST /repos/{owner}/{repo}/comments/{comment_id}/reactions"],createForIssue:["POST /repos/{owner}/{repo}/issues/{issue_number}/reactions"],createForIssueComment:["POST /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"],createForPullRequestReviewComment:["POST /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"],createForRelease:["POST /repos/{owner}/{repo}/releases/{release_id}/reactions"],createForTeamDiscussionCommentInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"],createForTeamDiscussionInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"],deleteForCommitComment:["DELETE /repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}"],deleteForIssue:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}"],deleteForIssueComment:["DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}"],deleteForPullRequestComment:["DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}"],deleteForRelease:["DELETE /repos/{owner}/{repo}/releases/{release_id}/reactions/{reaction_id}"],deleteForTeamDiscussion:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}"],deleteForTeamDiscussionComment:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}"],listForCommitComment:["GET /repos/{owner}/{repo}/comments/{comment_id}/reactions"],listForIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/reactions"],listForIssueComment:["GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"],listForPullRequestReviewComment:["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"],listForRelease:["GET /repos/{owner}/{repo}/releases/{release_id}/reactions"],listForTeamDiscussionCommentInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"],listForTeamDiscussionInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"]},repos:{acceptInvitation:["PATCH /user/repository_invitations/{invitation_id}",{},{renamed:["repos","acceptInvitationForAuthenticatedUser"]}],acceptInvitationForAuthenticatedUser:["PATCH /user/repository_invitations/{invitation_id}"],addAppAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],addCollaborator:["PUT /repos/{owner}/{repo}/collaborators/{username}"],addStatusCheckContexts:["POST /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],addTeamAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],addUserAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],cancelPagesDeployment:["POST /repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}/cancel"],checkAutomatedSecurityFixes:["GET /repos/{owner}/{repo}/automated-security-fixes"],checkCollaborator:["GET /repos/{owner}/{repo}/collaborators/{username}"],checkPrivateVulnerabilityReporting:["GET /repos/{owner}/{repo}/private-vulnerability-reporting"],checkVulnerabilityAlerts:["GET /repos/{owner}/{repo}/vulnerability-alerts"],codeownersErrors:["GET /repos/{owner}/{repo}/codeowners/errors"],compareCommits:["GET /repos/{owner}/{repo}/compare/{base}...{head}"],compareCommitsWithBasehead:["GET /repos/{owner}/{repo}/compare/{basehead}"],createAutolink:["POST /repos/{owner}/{repo}/autolinks"],createCommitComment:["POST /repos/{owner}/{repo}/commits/{commit_sha}/comments"],createCommitSignatureProtection:["POST /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],createCommitStatus:["POST /repos/{owner}/{repo}/statuses/{sha}"],createDeployKey:["POST /repos/{owner}/{repo}/keys"],createDeployment:["POST /repos/{owner}/{repo}/deployments"],createDeploymentBranchPolicy:["POST /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies"],createDeploymentProtectionRule:["POST /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules"],createDeploymentStatus:["POST /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"],createDispatchEvent:["POST /repos/{owner}/{repo}/dispatches"],createForAuthenticatedUser:["POST /user/repos"],createFork:["POST /repos/{owner}/{repo}/forks"],createInOrg:["POST /orgs/{org}/repos"],createOrUpdateCustomPropertiesValues:["PATCH /repos/{owner}/{repo}/properties/values"],createOrUpdateEnvironment:["PUT /repos/{owner}/{repo}/environments/{environment_name}"],createOrUpdateFileContents:["PUT /repos/{owner}/{repo}/contents/{path}"],createOrgRuleset:["POST /orgs/{org}/rulesets"],createPagesDeployment:["POST /repos/{owner}/{repo}/pages/deployments"],createPagesSite:["POST /repos/{owner}/{repo}/pages"],createRelease:["POST /repos/{owner}/{repo}/releases"],createRepoRuleset:["POST /repos/{owner}/{repo}/rulesets"],createTagProtection:["POST /repos/{owner}/{repo}/tags/protection"],createUsingTemplate:["POST /repos/{template_owner}/{template_repo}/generate"],createWebhook:["POST /repos/{owner}/{repo}/hooks"],declineInvitation:["DELETE /user/repository_invitations/{invitation_id}",{},{renamed:["repos","declineInvitationForAuthenticatedUser"]}],declineInvitationForAuthenticatedUser:["DELETE /user/repository_invitations/{invitation_id}"],delete:["DELETE /repos/{owner}/{repo}"],deleteAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"],deleteAdminBranchProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],deleteAnEnvironment:["DELETE /repos/{owner}/{repo}/environments/{environment_name}"],deleteAutolink:["DELETE /repos/{owner}/{repo}/autolinks/{autolink_id}"],deleteBranchProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection"],deleteCommitComment:["DELETE /repos/{owner}/{repo}/comments/{comment_id}"],deleteCommitSignatureProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],deleteDeployKey:["DELETE /repos/{owner}/{repo}/keys/{key_id}"],deleteDeployment:["DELETE /repos/{owner}/{repo}/deployments/{deployment_id}"],deleteDeploymentBranchPolicy:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],deleteFile:["DELETE /repos/{owner}/{repo}/contents/{path}"],deleteInvitation:["DELETE /repos/{owner}/{repo}/invitations/{invitation_id}"],deleteOrgRuleset:["DELETE /orgs/{org}/rulesets/{ruleset_id}"],deletePagesSite:["DELETE /repos/{owner}/{repo}/pages"],deletePullRequestReviewProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],deleteRelease:["DELETE /repos/{owner}/{repo}/releases/{release_id}"],deleteReleaseAsset:["DELETE /repos/{owner}/{repo}/releases/assets/{asset_id}"],deleteRepoRuleset:["DELETE /repos/{owner}/{repo}/rulesets/{ruleset_id}"],deleteTagProtection:["DELETE /repos/{owner}/{repo}/tags/protection/{tag_protection_id}"],deleteWebhook:["DELETE /repos/{owner}/{repo}/hooks/{hook_id}"],disableAutomatedSecurityFixes:["DELETE /repos/{owner}/{repo}/automated-security-fixes"],disableDeploymentProtectionRule:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}"],disablePrivateVulnerabilityReporting:["DELETE /repos/{owner}/{repo}/private-vulnerability-reporting"],disableVulnerabilityAlerts:["DELETE /repos/{owner}/{repo}/vulnerability-alerts"],downloadArchive:["GET /repos/{owner}/{repo}/zipball/{ref}",{},{renamed:["repos","downloadZipballArchive"]}],downloadTarballArchive:["GET /repos/{owner}/{repo}/tarball/{ref}"],downloadZipballArchive:["GET /repos/{owner}/{repo}/zipball/{ref}"],enableAutomatedSecurityFixes:["PUT /repos/{owner}/{repo}/automated-security-fixes"],enablePrivateVulnerabilityReporting:["PUT /repos/{owner}/{repo}/private-vulnerability-reporting"],enableVulnerabilityAlerts:["PUT /repos/{owner}/{repo}/vulnerability-alerts"],generateReleaseNotes:["POST /repos/{owner}/{repo}/releases/generate-notes"],get:["GET /repos/{owner}/{repo}"],getAccessRestrictions:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"],getAdminBranchProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],getAllDeploymentProtectionRules:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules"],getAllEnvironments:["GET /repos/{owner}/{repo}/environments"],getAllStatusCheckContexts:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts"],getAllTopics:["GET /repos/{owner}/{repo}/topics"],getAppsWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps"],getAutolink:["GET /repos/{owner}/{repo}/autolinks/{autolink_id}"],getBranch:["GET /repos/{owner}/{repo}/branches/{branch}"],getBranchProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection"],getBranchRules:["GET /repos/{owner}/{repo}/rules/branches/{branch}"],getClones:["GET /repos/{owner}/{repo}/traffic/clones"],getCodeFrequencyStats:["GET /repos/{owner}/{repo}/stats/code_frequency"],getCollaboratorPermissionLevel:["GET /repos/{owner}/{repo}/collaborators/{username}/permission"],getCombinedStatusForRef:["GET /repos/{owner}/{repo}/commits/{ref}/status"],getCommit:["GET /repos/{owner}/{repo}/commits/{ref}"],getCommitActivityStats:["GET /repos/{owner}/{repo}/stats/commit_activity"],getCommitComment:["GET /repos/{owner}/{repo}/comments/{comment_id}"],getCommitSignatureProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],getCommunityProfileMetrics:["GET /repos/{owner}/{repo}/community/profile"],getContent:["GET /repos/{owner}/{repo}/contents/{path}"],getContributorsStats:["GET /repos/{owner}/{repo}/stats/contributors"],getCustomDeploymentProtectionRule:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}"],getCustomPropertiesValues:["GET /repos/{owner}/{repo}/properties/values"],getDeployKey:["GET /repos/{owner}/{repo}/keys/{key_id}"],getDeployment:["GET /repos/{owner}/{repo}/deployments/{deployment_id}"],getDeploymentBranchPolicy:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],getDeploymentStatus:["GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}"],getEnvironment:["GET /repos/{owner}/{repo}/environments/{environment_name}"],getLatestPagesBuild:["GET /repos/{owner}/{repo}/pages/builds/latest"],getLatestRelease:["GET /repos/{owner}/{repo}/releases/latest"],getOrgRuleSuite:["GET /orgs/{org}/rulesets/rule-suites/{rule_suite_id}"],getOrgRuleSuites:["GET /orgs/{org}/rulesets/rule-suites"],getOrgRuleset:["GET /orgs/{org}/rulesets/{ruleset_id}"],getOrgRulesets:["GET /orgs/{org}/rulesets"],getPages:["GET /repos/{owner}/{repo}/pages"],getPagesBuild:["GET /repos/{owner}/{repo}/pages/builds/{build_id}"],getPagesDeployment:["GET /repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}"],getPagesHealthCheck:["GET /repos/{owner}/{repo}/pages/health"],getParticipationStats:["GET /repos/{owner}/{repo}/stats/participation"],getPullRequestReviewProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],getPunchCardStats:["GET /repos/{owner}/{repo}/stats/punch_card"],getReadme:["GET /repos/{owner}/{repo}/readme"],getReadmeInDirectory:["GET /repos/{owner}/{repo}/readme/{dir}"],getRelease:["GET /repos/{owner}/{repo}/releases/{release_id}"],getReleaseAsset:["GET /repos/{owner}/{repo}/releases/assets/{asset_id}"],getReleaseByTag:["GET /repos/{owner}/{repo}/releases/tags/{tag}"],getRepoRuleSuite:["GET /repos/{owner}/{repo}/rulesets/rule-suites/{rule_suite_id}"],getRepoRuleSuites:["GET /repos/{owner}/{repo}/rulesets/rule-suites"],getRepoRuleset:["GET /repos/{owner}/{repo}/rulesets/{ruleset_id}"],getRepoRulesets:["GET /repos/{owner}/{repo}/rulesets"],getStatusChecksProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],getTeamsWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams"],getTopPaths:["GET /repos/{owner}/{repo}/traffic/popular/paths"],getTopReferrers:["GET /repos/{owner}/{repo}/traffic/popular/referrers"],getUsersWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users"],getViews:["GET /repos/{owner}/{repo}/traffic/views"],getWebhook:["GET /repos/{owner}/{repo}/hooks/{hook_id}"],getWebhookConfigForRepo:["GET /repos/{owner}/{repo}/hooks/{hook_id}/config"],getWebhookDelivery:["GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}"],listActivities:["GET /repos/{owner}/{repo}/activity"],listAutolinks:["GET /repos/{owner}/{repo}/autolinks"],listBranches:["GET /repos/{owner}/{repo}/branches"],listBranchesForHeadCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head"],listCollaborators:["GET /repos/{owner}/{repo}/collaborators"],listCommentsForCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/comments"],listCommitCommentsForRepo:["GET /repos/{owner}/{repo}/comments"],listCommitStatusesForRef:["GET /repos/{owner}/{repo}/commits/{ref}/statuses"],listCommits:["GET /repos/{owner}/{repo}/commits"],listContributors:["GET /repos/{owner}/{repo}/contributors"],listCustomDeploymentRuleIntegrations:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps"],listDeployKeys:["GET /repos/{owner}/{repo}/keys"],listDeploymentBranchPolicies:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies"],listDeploymentStatuses:["GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"],listDeployments:["GET /repos/{owner}/{repo}/deployments"],listForAuthenticatedUser:["GET /user/repos"],listForOrg:["GET /orgs/{org}/repos"],listForUser:["GET /users/{username}/repos"],listForks:["GET /repos/{owner}/{repo}/forks"],listInvitations:["GET /repos/{owner}/{repo}/invitations"],listInvitationsForAuthenticatedUser:["GET /user/repository_invitations"],listLanguages:["GET /repos/{owner}/{repo}/languages"],listPagesBuilds:["GET /repos/{owner}/{repo}/pages/builds"],listPublic:["GET /repositories"],listPullRequestsAssociatedWithCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls"],listReleaseAssets:["GET /repos/{owner}/{repo}/releases/{release_id}/assets"],listReleases:["GET /repos/{owner}/{repo}/releases"],listTagProtection:["GET /repos/{owner}/{repo}/tags/protection"],listTags:["GET /repos/{owner}/{repo}/tags"],listTeams:["GET /repos/{owner}/{repo}/teams"],listWebhookDeliveries:["GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries"],listWebhooks:["GET /repos/{owner}/{repo}/hooks"],merge:["POST /repos/{owner}/{repo}/merges"],mergeUpstream:["POST /repos/{owner}/{repo}/merge-upstream"],pingWebhook:["POST /repos/{owner}/{repo}/hooks/{hook_id}/pings"],redeliverWebhookDelivery:["POST /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"],removeAppAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],removeCollaborator:["DELETE /repos/{owner}/{repo}/collaborators/{username}"],removeStatusCheckContexts:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],removeStatusCheckProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],removeTeamAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],removeUserAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],renameBranch:["POST /repos/{owner}/{repo}/branches/{branch}/rename"],replaceAllTopics:["PUT /repos/{owner}/{repo}/topics"],requestPagesBuild:["POST /repos/{owner}/{repo}/pages/builds"],setAdminBranchProtection:["POST /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],setAppAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],setStatusCheckContexts:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],setTeamAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],setUserAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],testPushWebhook:["POST /repos/{owner}/{repo}/hooks/{hook_id}/tests"],transfer:["POST /repos/{owner}/{repo}/transfer"],update:["PATCH /repos/{owner}/{repo}"],updateBranchProtection:["PUT /repos/{owner}/{repo}/branches/{branch}/protection"],updateCommitComment:["PATCH /repos/{owner}/{repo}/comments/{comment_id}"],updateDeploymentBranchPolicy:["PUT /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],updateInformationAboutPagesSite:["PUT /repos/{owner}/{repo}/pages"],updateInvitation:["PATCH /repos/{owner}/{repo}/invitations/{invitation_id}"],updateOrgRuleset:["PUT /orgs/{org}/rulesets/{ruleset_id}"],updatePullRequestReviewProtection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],updateRelease:["PATCH /repos/{owner}/{repo}/releases/{release_id}"],updateReleaseAsset:["PATCH /repos/{owner}/{repo}/releases/assets/{asset_id}"],updateRepoRuleset:["PUT /repos/{owner}/{repo}/rulesets/{ruleset_id}"],updateStatusCheckPotection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",{},{renamed:["repos","updateStatusCheckProtection"]}],updateStatusCheckProtection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],updateWebhook:["PATCH /repos/{owner}/{repo}/hooks/{hook_id}"],updateWebhookConfigForRepo:["PATCH /repos/{owner}/{repo}/hooks/{hook_id}/config"],uploadReleaseAsset:["POST /repos/{owner}/{repo}/releases/{release_id}/assets{?name,label}",{baseUrl:"https://uploads.github.com"}]},search:{code:["GET /search/code"],commits:["GET /search/commits"],issuesAndPullRequests:["GET /search/issues"],labels:["GET /search/labels"],repos:["GET /search/repositories"],topics:["GET /search/topics"],users:["GET /search/users"]},secretScanning:{getAlert:["GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"],listAlertsForEnterprise:["GET /enterprises/{enterprise}/secret-scanning/alerts"],listAlertsForOrg:["GET /orgs/{org}/secret-scanning/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/secret-scanning/alerts"],listLocationsForAlert:["GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations"],updateAlert:["PATCH /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"]},securityAdvisories:{createFork:["POST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/forks"],createPrivateVulnerabilityReport:["POST /repos/{owner}/{repo}/security-advisories/reports"],createRepositoryAdvisory:["POST /repos/{owner}/{repo}/security-advisories"],createRepositoryAdvisoryCveRequest:["POST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/cve"],getGlobalAdvisory:["GET /advisories/{ghsa_id}"],getRepositoryAdvisory:["GET /repos/{owner}/{repo}/security-advisories/{ghsa_id}"],listGlobalAdvisories:["GET /advisories"],listOrgRepositoryAdvisories:["GET /orgs/{org}/security-advisories"],listRepositoryAdvisories:["GET /repos/{owner}/{repo}/security-advisories"],updateRepositoryAdvisory:["PATCH /repos/{owner}/{repo}/security-advisories/{ghsa_id}"]},teams:{addOrUpdateMembershipForUserInOrg:["PUT /orgs/{org}/teams/{team_slug}/memberships/{username}"],addOrUpdateProjectPermissionsInOrg:["PUT /orgs/{org}/teams/{team_slug}/projects/{project_id}"],addOrUpdateRepoPermissionsInOrg:["PUT /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],checkPermissionsForProjectInOrg:["GET /orgs/{org}/teams/{team_slug}/projects/{project_id}"],checkPermissionsForRepoInOrg:["GET /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],create:["POST /orgs/{org}/teams"],createDiscussionCommentInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"],createDiscussionInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions"],deleteDiscussionCommentInOrg:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],deleteDiscussionInOrg:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],deleteInOrg:["DELETE /orgs/{org}/teams/{team_slug}"],getByName:["GET /orgs/{org}/teams/{team_slug}"],getDiscussionCommentInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],getDiscussionInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],getMembershipForUserInOrg:["GET /orgs/{org}/teams/{team_slug}/memberships/{username}"],list:["GET /orgs/{org}/teams"],listChildInOrg:["GET /orgs/{org}/teams/{team_slug}/teams"],listDiscussionCommentsInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"],listDiscussionsInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions"],listForAuthenticatedUser:["GET /user/teams"],listMembersInOrg:["GET /orgs/{org}/teams/{team_slug}/members"],listPendingInvitationsInOrg:["GET /orgs/{org}/teams/{team_slug}/invitations"],listProjectsInOrg:["GET /orgs/{org}/teams/{team_slug}/projects"],listReposInOrg:["GET /orgs/{org}/teams/{team_slug}/repos"],removeMembershipForUserInOrg:["DELETE /orgs/{org}/teams/{team_slug}/memberships/{username}"],removeProjectInOrg:["DELETE /orgs/{org}/teams/{team_slug}/projects/{project_id}"],removeRepoInOrg:["DELETE /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],updateDiscussionCommentInOrg:["PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],updateDiscussionInOrg:["PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],updateInOrg:["PATCH /orgs/{org}/teams/{team_slug}"]},users:{addEmailForAuthenticated:["POST /user/emails",{},{renamed:["users","addEmailForAuthenticatedUser"]}],addEmailForAuthenticatedUser:["POST /user/emails"],addSocialAccountForAuthenticatedUser:["POST /user/social_accounts"],block:["PUT /user/blocks/{username}"],checkBlocked:["GET /user/blocks/{username}"],checkFollowingForUser:["GET /users/{username}/following/{target_user}"],checkPersonIsFollowedByAuthenticated:["GET /user/following/{username}"],createGpgKeyForAuthenticated:["POST /user/gpg_keys",{},{renamed:["users","createGpgKeyForAuthenticatedUser"]}],createGpgKeyForAuthenticatedUser:["POST /user/gpg_keys"],createPublicSshKeyForAuthenticated:["POST /user/keys",{},{renamed:["users","createPublicSshKeyForAuthenticatedUser"]}],createPublicSshKeyForAuthenticatedUser:["POST /user/keys"],createSshSigningKeyForAuthenticatedUser:["POST /user/ssh_signing_keys"],deleteEmailForAuthenticated:["DELETE /user/emails",{},{renamed:["users","deleteEmailForAuthenticatedUser"]}],deleteEmailForAuthenticatedUser:["DELETE /user/emails"],deleteGpgKeyForAuthenticated:["DELETE /user/gpg_keys/{gpg_key_id}",{},{renamed:["users","deleteGpgKeyForAuthenticatedUser"]}],deleteGpgKeyForAuthenticatedUser:["DELETE /user/gpg_keys/{gpg_key_id}"],deletePublicSshKeyForAuthenticated:["DELETE /user/keys/{key_id}",{},{renamed:["users","deletePublicSshKeyForAuthenticatedUser"]}],deletePublicSshKeyForAuthenticatedUser:["DELETE /user/keys/{key_id}"],deleteSocialAccountForAuthenticatedUser:["DELETE /user/social_accounts"],deleteSshSigningKeyForAuthenticatedUser:["DELETE /user/ssh_signing_keys/{ssh_signing_key_id}"],follow:["PUT /user/following/{username}"],getAuthenticated:["GET /user"],getByUsername:["GET /users/{username}"],getContextForUser:["GET /users/{username}/hovercard"],getGpgKeyForAuthenticated:["GET /user/gpg_keys/{gpg_key_id}",{},{renamed:["users","getGpgKeyForAuthenticatedUser"]}],getGpgKeyForAuthenticatedUser:["GET /user/gpg_keys/{gpg_key_id}"],getPublicSshKeyForAuthenticated:["GET /user/keys/{key_id}",{},{renamed:["users","getPublicSshKeyForAuthenticatedUser"]}],getPublicSshKeyForAuthenticatedUser:["GET /user/keys/{key_id}"],getSshSigningKeyForAuthenticatedUser:["GET /user/ssh_signing_keys/{ssh_signing_key_id}"],list:["GET /users"],listBlockedByAuthenticated:["GET /user/blocks",{},{renamed:["users","listBlockedByAuthenticatedUser"]}],listBlockedByAuthenticatedUser:["GET /user/blocks"],listEmailsForAuthenticated:["GET /user/emails",{},{renamed:["users","listEmailsForAuthenticatedUser"]}],listEmailsForAuthenticatedUser:["GET /user/emails"],listFollowedByAuthenticated:["GET /user/following",{},{renamed:["users","listFollowedByAuthenticatedUser"]}],listFollowedByAuthenticatedUser:["GET /user/following"],listFollowersForAuthenticatedUser:["GET /user/followers"],listFollowersForUser:["GET /users/{username}/followers"],listFollowingForUser:["GET /users/{username}/following"],listGpgKeysForAuthenticated:["GET /user/gpg_keys",{},{renamed:["users","listGpgKeysForAuthenticatedUser"]}],listGpgKeysForAuthenticatedUser:["GET /user/gpg_keys"],listGpgKeysForUser:["GET /users/{username}/gpg_keys"],listPublicEmailsForAuthenticated:["GET /user/public_emails",{},{renamed:["users","listPublicEmailsForAuthenticatedUser"]}],listPublicEmailsForAuthenticatedUser:["GET /user/public_emails"],listPublicKeysForUser:["GET /users/{username}/keys"],listPublicSshKeysForAuthenticated:["GET /user/keys",{},{renamed:["users","listPublicSshKeysForAuthenticatedUser"]}],listPublicSshKeysForAuthenticatedUser:["GET /user/keys"],listSocialAccountsForAuthenticatedUser:["GET /user/social_accounts"],listSocialAccountsForUser:["GET /users/{username}/social_accounts"],listSshSigningKeysForAuthenticatedUser:["GET /user/ssh_signing_keys"],listSshSigningKeysForUser:["GET /users/{username}/ssh_signing_keys"],setPrimaryEmailVisibilityForAuthenticated:["PATCH /user/email/visibility",{},{renamed:["users","setPrimaryEmailVisibilityForAuthenticatedUser"]}],setPrimaryEmailVisibilityForAuthenticatedUser:["PATCH /user/email/visibility"],unblock:["DELETE /user/blocks/{username}"],unfollow:["DELETE /user/following/{username}"],updateAuthenticated:["PATCH /user"]}};const pe=new Map;for(const[vs,Ss]of Object.entries(ue))for(const[e,t]of Object.entries(Ss)){const[s,r,o]=t,[i,n]=s.split(/ /),a=Object.assign({method:i,url:n},r);pe.has(vs)||pe.set(vs,new Map),pe.get(vs).set(e,{scope:vs,methodName:e,endpointDefaults:a,decorations:o})}const de={has:({scope:e},t)=>pe.get(e).has(t),getOwnPropertyDescriptor(e,t){return{value:this.get(e,t),configurable:!0,writable:!0,enumerable:!0}},defineProperty:(e,t,s)=>(Object.defineProperty(e.cache,t,s),!0),deleteProperty:(e,t)=>(delete e.cache[t],!0),ownKeys:({scope:e})=>[...pe.get(e).keys()],set:(e,t,s)=>e.cache[t]=s,get({octokit:e,scope:t,cache:s},r){if(s[r])return s[r];const o=pe.get(t).get(r);if(!o)return;const{endpointDefaults:i,decorations:n}=o;return s[r]=n?function(e,t,s,r,o){const i=e.request.defaults(r);function n(...r){let n=i.endpoint.merge(...r);if(o.mapToData)return n=Object.assign({},n,{data:n[o.mapToData],[o.mapToData]:void 0}),i(n);if(o.renamed){const[r,i]=o.renamed;e.log.warn(`octokit.${t}.${s}() has been renamed to octokit.${r}.${i}()`)}if(o.deprecated&&e.log.warn(o.deprecated),o.renamedParameters){const n=i.endpoint.merge(...r);for(const[r,i]of Object.entries(o.renamedParameters))r in n&&(e.log.warn(`"${r}" parameter is deprecated for "octokit.${t}.${s}()". Use "${i}" instead`),i in n||(n[i]=n[r]),delete n[r]);return i(n)}return i(...r)}return Object.assign(n,i)}(e,t,r,i,n):e.request.defaults(i),s[r]}};function he(e){const t={};for(const s of pe.keys())t[s]=new Proxy({octokit:e,scope:s,cache:{}},de);return t}function ge(e){return{rest:he(e)}}ge.VERSION=le;var me=s(81209);async function _e(e,t,s,r){if(!s.request||!s.request.request)throw s;if(s.status>=400&&!e.doNotRetry.includes(s.status)){const o=null!=r.request.retries?r.request.retries:e.retries,i=Math.pow((r.request.retryCount||0)+1,2);throw t.retry.retryRequest(s,o,i)}throw s}async function fe(e,t,s,r){const o=new me;return o.on("failed",(function(t,s){const o=~~t.request.request.retries,i=~~t.request.request.retryAfter;if(r.request.retryCount=s.retryCount+1,o>s.retryCount)return i*e.retryAfterBaseValue})),o.schedule(Te.bind(null,e,t,s),r)}async function Te(e,t,s,r){const o=await s(s,r);if(o.data&&o.data.errors&&/Something went wrong while executing your query/.test(o.data.errors[0].message)){return _e(e,t,new O(o.data.errors[0].message,500,{request:r,response:o}),r)}return o}function ye(e,t){const s=Object.assign({enabled:!0,retryAfterBaseValue:1e3,doNotRetry:[400,401,403,404,422,451],retries:3},t.retry);return s.enabled&&(e.hook.error("request",_e.bind(null,s,e)),e.hook.wrap("request",fe.bind(null,s,e))),{retry:{retryRequest:(e,t,s)=>(e.request.request=Object.assign({},e.request.request,{retries:t,retryAfter:s}),e)}}}ye.VERSION="0.0.0-development";var we=()=>Promise.resolve();function Ee(e,t,s){return e.retryLimiter.schedule(be,e,t,s)}async function be(e,t,s){const r="GET"!==s.method&&"HEAD"!==s.method,{pathname:o}=new URL(s.url,"http://github.test"),i="GET"===s.method&&o.startsWith("/search/"),n=o.startsWith("/graphql"),a=~~t.retryCount>0?{priority:0,weight:0}:{};e.clustering&&(a.expiration=6e4),(r||n)&&await e.write.key(e.id).schedule(a,we),r&&e.triggersNotification(o)&&await e.notifications.key(e.id).schedule(a,we),i&&await e.search.key(e.id).schedule(a,we);const c=e.global.key(e.id).schedule(a,t,s);if(n){const e=await c;if(null!=e.data.errors&&e.data.errors.some((e=>"RATE_LIMITED"===e.type))){throw Object.assign(new Error("GraphQL Rate Limit Exceeded"),{response:e,data:e.data})}}return c}var ke=function(e){const t=`^(?:${e.map((e=>e.split("/").map((e=>e.startsWith("{")?"(?:.+?)":e)).join("/"))).map((e=>`(?:${e})`)).join("|")})[^/]*$`;return new RegExp(t,"i")}(["/orgs/{org}/invitations","/orgs/{org}/invitations/{invitation_id}","/orgs/{org}/teams/{team_slug}/discussions","/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments","/repos/{owner}/{repo}/collaborators/{username}","/repos/{owner}/{repo}/commits/{commit_sha}/comments","/repos/{owner}/{repo}/issues","/repos/{owner}/{repo}/issues/{issue_number}/comments","/repos/{owner}/{repo}/pulls","/repos/{owner}/{repo}/pulls/{pull_number}/comments","/repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies","/repos/{owner}/{repo}/pulls/{pull_number}/merge","/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers","/repos/{owner}/{repo}/pulls/{pull_number}/reviews","/repos/{owner}/{repo}/releases","/teams/{team_id}/discussions","/teams/{team_id}/discussions/{discussion_number}/comments"]),ve=ke.test.bind(ke),Se={};function Ae(e,t){const{enabled:s=!0,Bottleneck:r=me,id:o="no-id",timeout:i=12e4,connection:n}=t.throttle||{};if(!s)return{};const a={connection:n,timeout:i};null==Se.global&&function(e,t){Se.global=new e.Group({id:"octokit-global",maxConcurrent:10,...t}),Se.search=new e.Group({id:"octokit-search",maxConcurrent:1,minTime:2e3,...t}),Se.write=new e.Group({id:"octokit-write",maxConcurrent:1,minTime:1e3,...t}),Se.notifications=new e.Group({id:"octokit-notifications",maxConcurrent:1,minTime:3e3,...t})}(r,a);const c=Object.assign({clustering:null!=n,triggersNotification:ve,fallbackSecondaryRateRetryAfter:60,retryAfterBaseValue:1e3,retryLimiter:new r,id:o,...Se},t.throttle);if("function"!=typeof c.onSecondaryRateLimit||"function"!=typeof c.onRateLimit)throw new Error("octokit/plugin-throttling error:\n        You must pass the onSecondaryRateLimit and onRateLimit error handlers.\n        See https://octokit.github.io/rest.js/#throttling\n\n        const octokit = new Octokit({\n          throttle: {\n            onSecondaryRateLimit: (retryAfter, options) => {/* ... */},\n            onRateLimit: (retryAfter, options) => {/* ... */}\n          }\n        })\n    ");const l={},u=new r.Events(l);return l.on("secondary-limit",c.onSecondaryRateLimit),l.on("rate-limit",c.onRateLimit),l.on("error",(t=>e.log.warn("Error in throttling-plugin limit handler",t))),c.retryLimiter.on("failed",(async function(t,s){const[r,o,i]=s.args,{pathname:n}=new URL(i.url,"http://github.test");if(!(n.startsWith("/graphql")&&401!==t.status)&&403!==t.status)return;const a=~~o.retryCount;o.retryCount=a,i.request.retryCount=a;const{wantRetry:c,retryAfter:l=0}=await async function(){if(/\bsecondary rate\b/i.test(t.message)){const s=Number(t.response.headers["retry-after"])||r.fallbackSecondaryRateRetryAfter;return{wantRetry:await u.trigger("secondary-limit",s,i,e,a),retryAfter:s}}if(null!=t.response.headers&&"0"===t.response.headers["x-ratelimit-remaining"]||(t.response.data?.errors??[]).some((e=>"RATE_LIMITED"===e.type))){const s=new Date(1e3*~~t.response.headers["x-ratelimit-reset"]).getTime(),r=Math.max(Math.ceil((s-Date.now())/1e3)+1,0);return{wantRetry:await u.trigger("rate-limit",r,i,e,a),retryAfter:r}}return{}}();return c?(o.retryCount++,l*r.retryAfterBaseValue):void 0})),e.hook.wrap("request",Ee.bind(null,c)),{}}function Oe(e){const t=e.clientType||"oauth-app",s=e.baseUrl||"https://github.com",r={clientType:t,allowSignup:!1!==e.allowSignup,clientId:e.clientId,login:e.login||null,redirectUrl:e.redirectUrl||null,state:e.state||Math.random().toString(36).substr(2),url:""};if("oauth-app"===t){const t="scopes"in e?e.scopes:[];r.scopes="string"==typeof t?t.split(/[,\s]+/).filter(Boolean):t}return r.url=function(e,t){const s={allowSignup:"allow_signup",clientId:"client_id",login:"login",redirectUrl:"redirect_uri",scopes:"scope",state:"state"};let r=e;return Object.keys(s).filter((e=>null!==t[e])).filter((e=>"scopes"!==e||"github-app"!==t.clientType&&(!Array.isArray(t[e])||t[e].length>0))).map((e=>[s[e],`${t[e]}`])).forEach((([e,t],s)=>{r+=0===s?"?":"&",r+=`${e}=${encodeURIComponent(t)}`})),r}(`${s}/login/oauth/authorize`,r),r}Ae.VERSION="0.0.0-development",Ae.triggersNotification=ve;function Pe(e){const t=e.endpoint.DEFAULTS;return/^https:\/\/(api\.)?github\.com$/.test(t.baseUrl)?"https://github.com":t.baseUrl.replace("/api/v3","")}async function Ge(e,t,s){const r={baseUrl:Pe(e),headers:{accept:"application/json"},...s},o=await e(t,r);if("error"in o.data){const s=new O(`${o.data.error_description} (${o.data.error}, ${o.data.error_uri})`,400,{request:e.endpoint.merge(t,r)});throw s.response=o,s}return o}function Re(e,t){return new Date(e+1e3*t).toISOString()}async function Fe(e){const t=e.request||R,s=await Ge(t,"POST /login/oauth/access_token",{client_id:e.clientId,device_code:e.code,grant_type:"urn:ietf:params:oauth:grant-type:device_code"}),r={clientType:e.clientType,clientId:e.clientId,token:s.data.access_token,scopes:s.data.scope.split(/\s+/).filter(Boolean)};if("clientSecret"in e&&(r.clientSecret=e.clientSecret),"github-app"===e.clientType){if("refresh_token"in s.data){const e=new Date(s.headers.date).getTime();r.refreshToken=s.data.refresh_token,r.expiresAt=De(e,s.data.expires_in),r.refreshTokenExpiresAt=De(e,s.data.refresh_token_expires_in)}delete r.scopes}return{...s,authentication:r}}function De(e,t){return new Date(e+1e3*t).toISOString()}async function Ue(e){const t=e.request||R,s=await t("POST /applications/{client_id}/token",{headers:{authorization:`basic ${btoa(`${e.clientId}:${e.clientSecret}`)}`},client_id:e.clientId,access_token:e.token}),r={clientType:e.clientType,clientId:e.clientId,clientSecret:e.clientSecret,token:e.token,scopes:s.data.scopes};return s.data.expires_at&&(r.expiresAt=s.data.expires_at),"github-app"===e.clientType&&delete r.scopes,{...s,authentication:r}}async function Ce(e){const t=e.request||R,s=await Ge(t,"POST /login/oauth/access_token",{client_id:e.clientId,client_secret:e.clientSecret,grant_type:"refresh_token",refresh_token:e.refreshToken}),r=new Date(s.headers.date).getTime(),o={clientType:"github-app",clientId:e.clientId,clientSecret:e.clientSecret,token:s.data.access_token,refreshToken:s.data.refresh_token,expiresAt:Ie(r,s.data.expires_in),refreshTokenExpiresAt:Ie(r,s.data.refresh_token_expires_in)};return{...s,authentication:o}}function Ie(e,t){return new Date(e+1e3*t).toISOString()}async function Le(e){const t=e.request||R,s=btoa(`${e.clientId}:${e.clientSecret}`),r=await t("PATCH /applications/{client_id}/token",{headers:{authorization:`basic ${s}`},client_id:e.clientId,access_token:e.token}),o={clientType:e.clientType,clientId:e.clientId,clientSecret:e.clientSecret,token:r.data.token,scopes:r.data.scopes};return r.data.expires_at&&(o.expiresAt=r.data.expires_at),"github-app"===e.clientType&&delete o.scopes,{...r,authentication:o}}async function je(e){return(e.request||R)("DELETE /applications/{client_id}/token",{headers:{authorization:`basic ${btoa(`${e.clientId}:${e.clientSecret}`)}`},client_id:e.clientId,access_token:e.token})}async function qe(e){return(e.request||R)("DELETE /applications/{client_id}/grant",{headers:{authorization:`basic ${btoa(`${e.clientId}:${e.clientSecret}`)}`},client_id:e.clientId,access_token:e.token})}async function xe(e,t){const s=function(e,t){if(!0===t.refresh)return!1;if(!e.authentication)return!1;if("github-app"===e.clientType)return e.authentication;const s=e.authentication,r=("scopes"in t&&t.scopes||e.scopes).join(" "),o=s.scopes.join(" ");return r===o&&s}(e,t.auth);if(s)return s;const{data:r}=await async function(e){const t=e.request||R,s={client_id:e.clientId};return"scopes"in e&&Array.isArray(e.scopes)&&(s.scope=e.scopes.join(" ")),Ge(t,"POST /login/device/code",s)}({clientType:e.clientType,clientId:e.clientId,request:t.request||e.request,scopes:t.auth.scopes||e.scopes});await e.onVerification(r);const o=await $e(t.request||e.request,e.clientId,e.clientType,r);return e.authentication=o,o}async function ze(e){await new Promise((t=>setTimeout(t,1e3*e)))}async function $e(e,t,s,r){try{const o={clientId:t,request:e,code:r.device_code},{authentication:i}="oauth-app"===s?await Fe({...o,clientType:"oauth-app"}):await Fe({...o,clientType:"github-app"});return{type:"token",tokenType:"oauth",...i}}catch(o){if(!o.response)throw o;const i=o.response.data.error;if("authorization_pending"===i)return await ze(r.interval),$e(e,t,s,r);if("slow_down"===i)return await ze(r.interval+5),$e(e,t,s,r);throw o}}async function Be(e,t){return xe(e,{auth:t})}async function We(e,t,s,r){let o=t.endpoint.merge(s,r);if(/\/login\/(oauth\/access_token|device\/code)$/.test(o.url))return t(o);const{token:i}=await xe(e,{request:t,auth:{type:"oauth"}});return o.headers.authorization=`token ${i}`,t(o)}var Me="0.0.0-development";function He(e){const t=e.request||R.defaults({headers:{"user-agent":`octokit-auth-oauth-device.js/${Me} ${r()}`}}),{request:s=t,...o}=e,i="github-app"===e.clientType?{...o,clientType:"github-app",request:s}:{...o,clientType:"oauth-app",request:s,scopes:e.scopes||[]};if(!e.clientId)throw new Error('[@octokit/auth-oauth-device] "clientId" option must be set (https://github.com/octokit/auth-oauth-device.js#usage)');if(!e.onVerification)throw new Error('[@octokit/auth-oauth-device] "onVerification" option must be a function (https://github.com/octokit/auth-oauth-device.js#usage)');return Object.assign(Be.bind(null,i),{hook:We.bind(null,i)})}var Ne="0.0.0-development";async function Ve(e){if("code"in e.strategyOptions){const{authentication:t}=await async function(e){const t=e.request||R,s=await Ge(t,"POST /login/oauth/access_token",{client_id:e.clientId,client_secret:e.clientSecret,code:e.code,redirect_uri:e.redirectUrl}),r={clientType:e.clientType,clientId:e.clientId,clientSecret:e.clientSecret,token:s.data.access_token,scopes:s.data.scope.split(/\s+/).filter(Boolean)};if("github-app"===e.clientType){if("refresh_token"in s.data){const e=new Date(s.headers.date).getTime();r.refreshToken=s.data.refresh_token,r.expiresAt=Re(e,s.data.expires_in),r.refreshTokenExpiresAt=Re(e,s.data.refresh_token_expires_in)}delete r.scopes}return{...s,authentication:r}}({clientId:e.clientId,clientSecret:e.clientSecret,clientType:e.clientType,onTokenCreated:e.onTokenCreated,...e.strategyOptions,request:e.request});return{type:"token",tokenType:"oauth",...t}}if("onVerification"in e.strategyOptions){const t=He({clientType:e.clientType,clientId:e.clientId,onTokenCreated:e.onTokenCreated,...e.strategyOptions,request:e.request}),s=await t({type:"oauth"});return{clientSecret:e.clientSecret,...s}}if("token"in e.strategyOptions)return{type:"token",tokenType:"oauth",clientId:e.clientId,clientSecret:e.clientSecret,clientType:e.clientType,onTokenCreated:e.onTokenCreated,...e.strategyOptions};throw new Error("[@octokit/auth-oauth-user] Invalid strategy options")}async function Ke(e,t={}){if(e.authentication||(e.authentication=(e.clientType,await Ve(e))),e.authentication.invalid)throw new Error("[@octokit/auth-oauth-user] Token is invalid");const s=e.authentication;if("expiresAt"in s&&("refresh"===t.type||new Date(s.expiresAt)<new Date)){const{authentication:t}=await Ce({clientType:"github-app",clientId:e.clientId,clientSecret:e.clientSecret,refreshToken:s.refreshToken,request:e.request});e.authentication={tokenType:"oauth",type:"token",...t}}if("refresh"===t.type){if("oauth-app"===e.clientType)throw new Error("[@octokit/auth-oauth-user] OAuth Apps do not support expiring tokens");if(!s.hasOwnProperty("expiresAt"))throw new Error("[@octokit/auth-oauth-user] Refresh token missing");await(e.onTokenCreated?.(e.authentication,{type:t.type}))}if("check"===t.type||"reset"===t.type){const s="check"===t.type?Ue:Le;try{const{authentication:r}=await s({clientType:e.clientType,clientId:e.clientId,clientSecret:e.clientSecret,token:e.authentication.token,request:e.request});return e.authentication={tokenType:"oauth",type:"token",...r},"reset"===t.type&&await(e.onTokenCreated?.(e.authentication,{type:t.type})),e.authentication}catch(r){throw 404===r.status&&(r.message="[@octokit/auth-oauth-user] Token is invalid",e.authentication.invalid=!0),r}}if("delete"===t.type||"deleteAuthorization"===t.type){const s="delete"===t.type?je:qe;try{await s({clientType:e.clientType,clientId:e.clientId,clientSecret:e.clientSecret,token:e.authentication.token,request:e.request})}catch(r){if(404!==r.status)throw r}return e.authentication.invalid=!0,e.authentication}return e.authentication}var Je=/\/applications\/[^/]+\/(token|grant)s?/;function Ye(e){return e&&Je.test(e)}async function Qe(e,t,s,r={}){const o=t.endpoint.merge(s,r);if(/\/login\/(oauth\/access_token|device\/code)$/.test(o.url))return t(o);if(Ye(o.url)){const s=btoa(`${e.clientId}:${e.clientSecret}`);return o.headers.authorization=`basic ${s}`,t(o)}const{token:i}=(e.clientType,await Ke({...e,request:t}));return o.headers.authorization="token "+i,t(o)}function Xe({clientId:e,clientSecret:t,clientType:s="oauth-app",request:o=R.defaults({headers:{"user-agent":`octokit-auth-oauth-app.js/${Ne} ${r()}`}}),onTokenCreated:i,...n}){const a=Object.assign({clientType:s,clientId:e,clientSecret:t,onTokenCreated:i,strategyOptions:n,request:o});return Object.assign(Ke.bind(null,a),{hook:Qe.bind(null,a)})}async function Ze(e,t){if("oauth-app"===t.type)return{type:"oauth-app",clientId:e.clientId,clientSecret:e.clientSecret,clientType:e.clientType,headers:{authorization:`basic ${btoa(`${e.clientId}:${e.clientSecret}`)}`}};if("factory"in t){const{type:s,...r}={...t,...e};return t.factory(r)}const s={clientId:e.clientId,clientSecret:e.clientSecret,request:e.request,...t};return(e.clientType,await Xe({...s,clientType:e.clientType}))()}async function et(e,t,s,r){let o=t.endpoint.merge(s,r);if(/\/login\/(oauth\/access_token|device\/code)$/.test(o.url))return t(o);if("github-app"===e.clientType&&!Ye(o.url))throw new Error(`[@octokit/auth-oauth-app] GitHub Apps cannot use their client ID/secret for basic authentication for endpoints other than "/applications/{client_id}/**". "${o.method} ${o.url}" is not supported.`);const i=btoa(`${e.clientId}:${e.clientSecret}`);o.headers.authorization=`basic ${i}`;try{return await t(o)}catch(n){if(401!==n.status)throw n;throw n.message=`[@octokit/auth-oauth-app] "${o.method} ${o.url}" does not support clientId/clientSecret basic authentication.`,n}}Xe.VERSION=Ne;var tt="0.0.0-development";function st(e){const t=Object.assign({request:R.defaults({headers:{"user-agent":`octokit-auth-oauth-app.js/${tt} ${r()}`}}),clientType:"oauth-app"},e);return Object.assign(Ze.bind(null,t),{hook:et.bind(null,t)})}function rt(e){const t=new ArrayBuffer(e.length),s=new Uint8Array(t);for(let r=0,o=e.length;r<o;r++)s[r]=e.charCodeAt(r);return t}function ot(e){return e.replace(/=/g,"").replace(/\+/g,"-").replace(/\//g,"_")}function it(e){return ot(btoa(JSON.stringify(e)))}const{subtle:nt}=globalThis.crypto;async function at({privateKey:e,payload:t}){const s=e;if(function(e){return e.includes("-----BEGIN RSA PRIVATE KEY-----")}(s))throw new Error("[universal-github-app-jwt] Private Key is in PKCS#1 format, but only PKCS#8 is supported. See https://github.com/gr2m/universal-github-app-jwt#private-key-formats");if(function(e){return e.includes("-----BEGIN OPENSSH PRIVATE KEY-----")}(s))throw new Error("[universal-github-app-jwt] Private Key is in OpenSSH format, but only PKCS#8 is supported. See https://github.com/gr2m/universal-github-app-jwt#private-key-formats");const r={name:"RSASSA-PKCS1-v1_5",hash:{name:"SHA-256"}},o=function(e){const t=e.trim().split("\n").slice(1,-1).join("");return rt(atob(t))}(s),i=await nt.importKey("pkcs8",o,r,!1,["sign"]),n=function(e,t){return`${it(e)}.${it(t)}`}({alg:"RS256",typ:"JWT"},t),a=rt(n);return`${n}.${function(e){for(var t="",s=new Uint8Array(e),r=s.byteLength,o=0;o<r;o++)t+=String.fromCharCode(s[o]);return ot(btoa(t))}(await nt.sign(r.name,i,a))}`}const ct="object"==typeof performance&&performance&&"function"==typeof performance.now?performance:Date,lt=new Set,ut="object"==typeof process&&process?process:{},pt=(e,t,s,r)=>{"function"==typeof ut.emitWarning?ut.emitWarning(e,t,s,r):console.error(`[${s}] ${t}: ${e}`)};let dt=globalThis.AbortController,ht=globalThis.AbortSignal;if(void 0===dt){ht=class{onabort;_onabort=[];reason;aborted=!1;addEventListener(e,t){this._onabort.push(t)}},dt=class{constructor(){t()}signal=new ht;abort(e){if(!this.signal.aborted){this.signal.reason=e,this.signal.aborted=!0;for(const t of this.signal._onabort)t(e);this.signal.onabort?.(e)}}};let e="1"!==ut.env?.LRU_CACHE_IGNORE_AC_WARNING;const t=()=>{e&&(e=!1,pt("AbortController is not defined. If using lru-cache in node 14, load an AbortController polyfill from the `node-abort-controller` package. A minimal polyfill is provided for use by LRUCache.fetch(), but it should not be relied upon in other contexts (eg, passing it to other APIs that use AbortController/AbortSignal might have undesirable effects). You may disable this with LRU_CACHE_IGNORE_AC_WARNING=1 in the env.","NO_ABORT_CONTROLLER","ENOTSUP",t))}}Symbol("type");const gt=e=>e&&e===Math.floor(e)&&e>0&&isFinite(e),mt=e=>gt(e)?e<=Math.pow(2,8)?Uint8Array:e<=Math.pow(2,16)?Uint16Array:e<=Math.pow(2,32)?Uint32Array:e<=Number.MAX_SAFE_INTEGER?_t:null:null;class _t extends Array{constructor(e){super(e),this.fill(0)}}class ft{heap;length;static#e=!1;static create(e){const t=mt(e);if(!t)return[];ft.#e=!0;const s=new ft(e,t);return ft.#e=!1,s}constructor(e,t){if(!ft.#e)throw new TypeError("instantiate Stack using Stack.create(n)");this.heap=new t(e),this.length=0}push(e){this.heap[this.length++]=e}pop(){return this.heap[--this.length]}}class Tt{#t;#s;#r;#o;#i;#n;ttl;ttlResolution;ttlAutopurge;updateAgeOnGet;updateAgeOnHas;allowStale;noDisposeOnSet;noUpdateTTL;maxEntrySize;sizeCalculation;noDeleteOnFetchRejection;noDeleteOnStaleGet;allowStaleOnFetchAbort;allowStaleOnFetchRejection;ignoreFetchAbort;#a;#c;#l;#u;#p;#d;#h;#g;#m;#_;#f;#T;#y;#w;#E;#b;#k;static unsafeExposeInternals(e){return{starts:e.#y,ttls:e.#w,sizes:e.#T,keyMap:e.#l,keyList:e.#u,valList:e.#p,next:e.#d,prev:e.#h,get head(){return e.#g},get tail(){return e.#m},free:e.#_,isBackgroundFetch:t=>e.#v(t),backgroundFetch:(t,s,r,o)=>e.#S(t,s,r,o),moveToTail:t=>e.#A(t),indexes:t=>e.#O(t),rindexes:t=>e.#P(t),isStale:t=>e.#G(t)}}get max(){return this.#t}get maxSize(){return this.#s}get calculatedSize(){return this.#c}get size(){return this.#a}get fetchMethod(){return this.#i}get memoMethod(){return this.#n}get dispose(){return this.#r}get disposeAfter(){return this.#o}constructor(e){const{max:t=0,ttl:s,ttlResolution:r=1,ttlAutopurge:o,updateAgeOnGet:i,updateAgeOnHas:n,allowStale:a,dispose:c,disposeAfter:l,noDisposeOnSet:u,noUpdateTTL:p,maxSize:d=0,maxEntrySize:h=0,sizeCalculation:g,fetchMethod:m,memoMethod:_,noDeleteOnFetchRejection:f,noDeleteOnStaleGet:T,allowStaleOnFetchRejection:y,allowStaleOnFetchAbort:w,ignoreFetchAbort:E}=e;if(0!==t&&!gt(t))throw new TypeError("max option must be a nonnegative integer");const b=t?mt(t):Array;if(!b)throw new Error("invalid max value: "+t);if(this.#t=t,this.#s=d,this.maxEntrySize=h||this.#s,this.sizeCalculation=g,this.sizeCalculation){if(!this.#s&&!this.maxEntrySize)throw new TypeError("cannot set sizeCalculation without setting maxSize or maxEntrySize");if("function"!=typeof this.sizeCalculation)throw new TypeError("sizeCalculation set to non-function")}if(void 0!==_&&"function"!=typeof _)throw new TypeError("memoMethod must be a function if defined");if(this.#n=_,void 0!==m&&"function"!=typeof m)throw new TypeError("fetchMethod must be a function if specified");if(this.#i=m,this.#b=!!m,this.#l=new Map,this.#u=new Array(t).fill(void 0),this.#p=new Array(t).fill(void 0),this.#d=new b(t),this.#h=new b(t),this.#g=0,this.#m=0,this.#_=ft.create(t),this.#a=0,this.#c=0,"function"==typeof c&&(this.#r=c),"function"==typeof l?(this.#o=l,this.#f=[]):(this.#o=void 0,this.#f=void 0),this.#E=!!this.#r,this.#k=!!this.#o,this.noDisposeOnSet=!!u,this.noUpdateTTL=!!p,this.noDeleteOnFetchRejection=!!f,this.allowStaleOnFetchRejection=!!y,this.allowStaleOnFetchAbort=!!w,this.ignoreFetchAbort=!!E,0!==this.maxEntrySize){if(0!==this.#s&&!gt(this.#s))throw new TypeError("maxSize must be a positive integer if specified");if(!gt(this.maxEntrySize))throw new TypeError("maxEntrySize must be a positive integer if specified");this.#R()}if(this.allowStale=!!a,this.noDeleteOnStaleGet=!!T,this.updateAgeOnGet=!!i,this.updateAgeOnHas=!!n,this.ttlResolution=gt(r)||0===r?r:1,this.ttlAutopurge=!!o,this.ttl=s||0,this.ttl){if(!gt(this.ttl))throw new TypeError("ttl must be a positive integer if specified");this.#F()}if(0===this.#t&&0===this.ttl&&0===this.#s)throw new TypeError("At least one of max, maxSize, or ttl is required");if(!this.ttlAutopurge&&!this.#t&&!this.#s){const e="LRU_CACHE_UNBOUNDED";if((e=>!lt.has(e))(e)){lt.add(e);pt("TTL caching without ttlAutopurge, max, or maxSize can result in unbounded memory consumption.","UnboundedCacheWarning",e,Tt)}}}getRemainingTTL(e){return this.#l.has(e)?1/0:0}#F(){const e=new _t(this.#t),t=new _t(this.#t);this.#w=e,this.#y=t,this.#D=(s,r,o=ct.now())=>{if(t[s]=0!==r?o:0,e[s]=r,0!==r&&this.ttlAutopurge){const e=setTimeout((()=>{this.#G(s)&&this.#U(this.#u[s],"expire")}),r+1);e.unref&&e.unref()}},this.#C=s=>{t[s]=0!==e[s]?ct.now():0},this.#I=(o,i)=>{if(e[i]){const n=e[i],a=t[i];if(!n||!a)return;o.ttl=n,o.start=a,o.now=s||r();const c=o.now-a;o.remainingTTL=n-c}};let s=0;const r=()=>{const e=ct.now();if(this.ttlResolution>0){s=e;const t=setTimeout((()=>s=0),this.ttlResolution);t.unref&&t.unref()}return e};this.getRemainingTTL=o=>{const i=this.#l.get(o);if(void 0===i)return 0;const n=e[i],a=t[i];if(!n||!a)return 1/0;return n-((s||r())-a)},this.#G=o=>{const i=t[o],n=e[o];return!!n&&!!i&&(s||r())-i>n}}#C=()=>{};#I=()=>{};#D=()=>{};#G=()=>!1;#R(){const e=new _t(this.#t);this.#c=0,this.#T=e,this.#L=t=>{this.#c-=e[t],e[t]=0},this.#j=(e,t,s,r)=>{if(this.#v(t))return 0;if(!gt(s)){if(!r)throw new TypeError("invalid size value (must be positive integer). When maxSize or maxEntrySize is used, sizeCalculation or size must be set.");if("function"!=typeof r)throw new TypeError("sizeCalculation must be a function");if(s=r(t,e),!gt(s))throw new TypeError("sizeCalculation return invalid (expect positive integer)")}return s},this.#q=(t,s,r)=>{if(e[t]=s,this.#s){const s=this.#s-e[t];for(;this.#c>s;)this.#x(!0)}this.#c+=e[t],r&&(r.entrySize=s,r.totalCalculatedSize=this.#c)}}#L=e=>{};#q=(e,t,s)=>{};#j=(e,t,s,r)=>{if(s||r)throw new TypeError("cannot set size without setting maxSize or maxEntrySize on cache");return 0};*#O({allowStale:e=this.allowStale}={}){if(this.#a)for(let t=this.#m;this.#z(t)&&(!e&&this.#G(t)||(yield t),t!==this.#g);)t=this.#h[t]}*#P({allowStale:e=this.allowStale}={}){if(this.#a)for(let t=this.#g;this.#z(t)&&(!e&&this.#G(t)||(yield t),t!==this.#m);)t=this.#d[t]}#z(e){return void 0!==e&&this.#l.get(this.#u[e])===e}*entries(){for(const e of this.#O())void 0===this.#p[e]||void 0===this.#u[e]||this.#v(this.#p[e])||(yield[this.#u[e],this.#p[e]])}*rentries(){for(const e of this.#P())void 0===this.#p[e]||void 0===this.#u[e]||this.#v(this.#p[e])||(yield[this.#u[e],this.#p[e]])}*keys(){for(const e of this.#O()){const t=this.#u[e];void 0===t||this.#v(this.#p[e])||(yield t)}}*rkeys(){for(const e of this.#P()){const t=this.#u[e];void 0===t||this.#v(this.#p[e])||(yield t)}}*values(){for(const e of this.#O()){void 0===this.#p[e]||this.#v(this.#p[e])||(yield this.#p[e])}}*rvalues(){for(const e of this.#P()){void 0===this.#p[e]||this.#v(this.#p[e])||(yield this.#p[e])}}[Symbol.iterator](){return this.entries()}[Symbol.toStringTag]="LRUCache";find(e,t={}){for(const s of this.#O()){const r=this.#p[s],o=this.#v(r)?r.__staleWhileFetching:r;if(void 0!==o&&e(o,this.#u[s],this))return this.get(this.#u[s],t)}}forEach(e,t=this){for(const s of this.#O()){const r=this.#p[s],o=this.#v(r)?r.__staleWhileFetching:r;void 0!==o&&e.call(t,o,this.#u[s],this)}}rforEach(e,t=this){for(const s of this.#P()){const r=this.#p[s],o=this.#v(r)?r.__staleWhileFetching:r;void 0!==o&&e.call(t,o,this.#u[s],this)}}purgeStale(){let e=!1;for(const t of this.#P({allowStale:!0}))this.#G(t)&&(this.#U(this.#u[t],"expire"),e=!0);return e}info(e){const t=this.#l.get(e);if(void 0===t)return;const s=this.#p[t],r=this.#v(s)?s.__staleWhileFetching:s;if(void 0===r)return;const o={value:r};if(this.#w&&this.#y){const e=this.#w[t],s=this.#y[t];if(e&&s){const t=e-(ct.now()-s);o.ttl=t,o.start=Date.now()}}return this.#T&&(o.size=this.#T[t]),o}dump(){const e=[];for(const t of this.#O({allowStale:!0})){const s=this.#u[t],r=this.#p[t],o=this.#v(r)?r.__staleWhileFetching:r;if(void 0===o||void 0===s)continue;const i={value:o};if(this.#w&&this.#y){i.ttl=this.#w[t];const e=ct.now()-this.#y[t];i.start=Math.floor(Date.now()-e)}this.#T&&(i.size=this.#T[t]),e.unshift([s,i])}return e}load(e){this.clear();for(const[t,s]of e){if(s.start){const e=Date.now()-s.start;s.start=ct.now()-e}this.set(t,s.value,s)}}set(e,t,s={}){if(void 0===t)return this.delete(e),this;const{ttl:r=this.ttl,start:o,noDisposeOnSet:i=this.noDisposeOnSet,sizeCalculation:n=this.sizeCalculation,status:a}=s;let{noUpdateTTL:c=this.noUpdateTTL}=s;const l=this.#j(e,t,s.size||0,n);if(this.maxEntrySize&&l>this.maxEntrySize)return a&&(a.set="miss",a.maxEntrySizeExceeded=!0),this.#U(e,"set"),this;let u=0===this.#a?void 0:this.#l.get(e);if(void 0===u)u=0===this.#a?this.#m:0!==this.#_.length?this.#_.pop():this.#a===this.#t?this.#x(!1):this.#a,this.#u[u]=e,this.#p[u]=t,this.#l.set(e,u),this.#d[this.#m]=u,this.#h[u]=this.#m,this.#m=u,this.#a++,this.#q(u,l,a),a&&(a.set="add"),c=!1;else{this.#A(u);const s=this.#p[u];if(t!==s){if(this.#b&&this.#v(s)){s.__abortController.abort(new Error("replaced"));const{__staleWhileFetching:t}=s;void 0===t||i||(this.#E&&this.#r?.(t,e,"set"),this.#k&&this.#f?.push([t,e,"set"]))}else i||(this.#E&&this.#r?.(s,e,"set"),this.#k&&this.#f?.push([s,e,"set"]));if(this.#L(u),this.#q(u,l,a),this.#p[u]=t,a){a.set="replace";const e=s&&this.#v(s)?s.__staleWhileFetching:s;void 0!==e&&(a.oldValue=e)}}else a&&(a.set="update")}if(0===r||this.#w||this.#F(),this.#w&&(c||this.#D(u,r,o),a&&this.#I(a,u)),!i&&this.#k&&this.#f){const e=this.#f;let t;for(;t=e?.shift();)this.#o?.(...t)}return this}pop(){try{for(;this.#a;){const e=this.#p[this.#g];if(this.#x(!0),this.#v(e)){if(e.__staleWhileFetching)return e.__staleWhileFetching}else if(void 0!==e)return e}}finally{if(this.#k&&this.#f){const e=this.#f;let t;for(;t=e?.shift();)this.#o?.(...t)}}}#x(e){const t=this.#g,s=this.#u[t],r=this.#p[t];return this.#b&&this.#v(r)?r.__abortController.abort(new Error("evicted")):(this.#E||this.#k)&&(this.#E&&this.#r?.(r,s,"evict"),this.#k&&this.#f?.push([r,s,"evict"])),this.#L(t),e&&(this.#u[t]=void 0,this.#p[t]=void 0,this.#_.push(t)),1===this.#a?(this.#g=this.#m=0,this.#_.length=0):this.#g=this.#d[t],this.#l.delete(s),this.#a--,t}has(e,t={}){const{updateAgeOnHas:s=this.updateAgeOnHas,status:r}=t,o=this.#l.get(e);if(void 0!==o){const e=this.#p[o];if(this.#v(e)&&void 0===e.__staleWhileFetching)return!1;if(!this.#G(o))return s&&this.#C(o),r&&(r.has="hit",this.#I(r,o)),!0;r&&(r.has="stale",this.#I(r,o))}else r&&(r.has="miss");return!1}peek(e,t={}){const{allowStale:s=this.allowStale}=t,r=this.#l.get(e);if(void 0===r||!s&&this.#G(r))return;const o=this.#p[r];return this.#v(o)?o.__staleWhileFetching:o}#S(e,t,s,r){const o=void 0===t?void 0:this.#p[t];if(this.#v(o))return o;const i=new dt,{signal:n}=s;n?.addEventListener("abort",(()=>i.abort(n.reason)),{signal:i.signal});const a={signal:i.signal,options:s,context:r},c=(r,o=!1)=>{const{aborted:n}=i.signal,c=s.ignoreFetchAbort&&void 0!==r;if(s.status&&(n&&!o?(s.status.fetchAborted=!0,s.status.fetchError=i.signal.reason,c&&(s.status.fetchAbortIgnored=!0)):s.status.fetchResolved=!0),n&&!c&&!o)return l(i.signal.reason);const p=u;return this.#p[t]===u&&(void 0===r?p.__staleWhileFetching?this.#p[t]=p.__staleWhileFetching:this.#U(e,"fetch"):(s.status&&(s.status.fetchUpdated=!0),this.set(e,r,a.options))),r},l=r=>{const{aborted:o}=i.signal,n=o&&s.allowStaleOnFetchAbort,a=n||s.allowStaleOnFetchRejection,c=a||s.noDeleteOnFetchRejection,l=u;if(this.#p[t]===u){!c||void 0===l.__staleWhileFetching?this.#U(e,"fetch"):n||(this.#p[t]=l.__staleWhileFetching)}if(a)return s.status&&void 0!==l.__staleWhileFetching&&(s.status.returnedStale=!0),l.__staleWhileFetching;if(l.__returned===l)throw r};s.status&&(s.status.fetchDispatched=!0);const u=new Promise(((t,r)=>{const n=this.#i?.(e,o,a);n&&n instanceof Promise&&n.then((e=>t(void 0===e?void 0:e)),r),i.signal.addEventListener("abort",(()=>{s.ignoreFetchAbort&&!s.allowStaleOnFetchAbort||(t(void 0),s.allowStaleOnFetchAbort&&(t=e=>c(e,!0)))}))})).then(c,(e=>(s.status&&(s.status.fetchRejected=!0,s.status.fetchError=e),l(e)))),p=Object.assign(u,{__abortController:i,__staleWhileFetching:o,__returned:void 0});return void 0===t?(this.set(e,p,{...a.options,status:void 0}),t=this.#l.get(e)):this.#p[t]=p,p}#v(e){if(!this.#b)return!1;const t=e;return!!t&&t instanceof Promise&&t.hasOwnProperty("__staleWhileFetching")&&t.__abortController instanceof dt}async fetch(e,t={}){const{allowStale:s=this.allowStale,updateAgeOnGet:r=this.updateAgeOnGet,noDeleteOnStaleGet:o=this.noDeleteOnStaleGet,ttl:i=this.ttl,noDisposeOnSet:n=this.noDisposeOnSet,size:a=0,sizeCalculation:c=this.sizeCalculation,noUpdateTTL:l=this.noUpdateTTL,noDeleteOnFetchRejection:u=this.noDeleteOnFetchRejection,allowStaleOnFetchRejection:p=this.allowStaleOnFetchRejection,ignoreFetchAbort:d=this.ignoreFetchAbort,allowStaleOnFetchAbort:h=this.allowStaleOnFetchAbort,context:g,forceRefresh:m=!1,status:_,signal:f}=t;if(!this.#b)return _&&(_.fetch="get"),this.get(e,{allowStale:s,updateAgeOnGet:r,noDeleteOnStaleGet:o,status:_});const T={allowStale:s,updateAgeOnGet:r,noDeleteOnStaleGet:o,ttl:i,noDisposeOnSet:n,size:a,sizeCalculation:c,noUpdateTTL:l,noDeleteOnFetchRejection:u,allowStaleOnFetchRejection:p,allowStaleOnFetchAbort:h,ignoreFetchAbort:d,status:_,signal:f};let y=this.#l.get(e);if(void 0===y){_&&(_.fetch="miss");const t=this.#S(e,y,T,g);return t.__returned=t}{const t=this.#p[y];if(this.#v(t)){const e=s&&void 0!==t.__staleWhileFetching;return _&&(_.fetch="inflight",e&&(_.returnedStale=!0)),e?t.__staleWhileFetching:t.__returned=t}const o=this.#G(y);if(!m&&!o)return _&&(_.fetch="hit"),this.#A(y),r&&this.#C(y),_&&this.#I(_,y),t;const i=this.#S(e,y,T,g),n=void 0!==i.__staleWhileFetching&&s;return _&&(_.fetch=o?"stale":"refresh",n&&o&&(_.returnedStale=!0)),n?i.__staleWhileFetching:i.__returned=i}}async forceFetch(e,t={}){const s=await this.fetch(e,t);if(void 0===s)throw new Error("fetch() returned undefined");return s}memo(e,t={}){const s=this.#n;if(!s)throw new Error("no memoMethod provided to constructor");const{context:r,forceRefresh:o,...i}=t,n=this.get(e,i);if(!o&&void 0!==n)return n;const a=s(e,n,{options:i,context:r});return this.set(e,a,i),a}get(e,t={}){const{allowStale:s=this.allowStale,updateAgeOnGet:r=this.updateAgeOnGet,noDeleteOnStaleGet:o=this.noDeleteOnStaleGet,status:i}=t,n=this.#l.get(e);if(void 0!==n){const t=this.#p[n],a=this.#v(t);return i&&this.#I(i,n),this.#G(n)?(i&&(i.get="stale"),a?(i&&s&&void 0!==t.__staleWhileFetching&&(i.returnedStale=!0),s?t.__staleWhileFetching:void 0):(o||this.#U(e,"expire"),i&&s&&(i.returnedStale=!0),s?t:void 0)):(i&&(i.get="hit"),a?t.__staleWhileFetching:(this.#A(n),r&&this.#C(n),t))}i&&(i.get="miss")}#$(e,t){this.#h[t]=e,this.#d[e]=t}#A(e){e!==this.#m&&(e===this.#g?this.#g=this.#d[e]:this.#$(this.#h[e],this.#d[e]),this.#$(this.#m,e),this.#m=e)}delete(e){return this.#U(e,"delete")}#U(e,t){let s=!1;if(0!==this.#a){const r=this.#l.get(e);if(void 0!==r)if(s=!0,1===this.#a)this.#B(t);else{this.#L(r);const s=this.#p[r];if(this.#v(s)?s.__abortController.abort(new Error("deleted")):(this.#E||this.#k)&&(this.#E&&this.#r?.(s,e,t),this.#k&&this.#f?.push([s,e,t])),this.#l.delete(e),this.#u[r]=void 0,this.#p[r]=void 0,r===this.#m)this.#m=this.#h[r];else if(r===this.#g)this.#g=this.#d[r];else{const e=this.#h[r];this.#d[e]=this.#d[r];const t=this.#d[r];this.#h[t]=this.#h[r]}this.#a--,this.#_.push(r)}}if(this.#k&&this.#f?.length){const e=this.#f;let t;for(;t=e?.shift();)this.#o?.(...t)}return s}clear(){return this.#B("delete")}#B(e){for(const t of this.#P({allowStale:!0})){const s=this.#p[t];if(this.#v(s))s.__abortController.abort(new Error("deleted"));else{const r=this.#u[t];this.#E&&this.#r?.(s,r,e),this.#k&&this.#f?.push([s,r,e])}}if(this.#l.clear(),this.#p.fill(void 0),this.#u.fill(void 0),this.#w&&this.#y&&(this.#w.fill(0),this.#y.fill(0)),this.#T&&this.#T.fill(0),this.#g=0,this.#m=0,this.#_.length=0,this.#c=0,this.#a=0,this.#k&&this.#f){const e=this.#f;let t;for(;t=e?.shift();)this.#o?.(...t)}}}async function yt({appId:e,privateKey:t,timeDifference:s}){try{const r=await async function({id:e,privateKey:t,now:s=Math.floor(Date.now()/1e3)}){const r=t.replace(/\\n/g,"\n"),o=s-30,i=o+600,n={iat:o,exp:i,iss:e};return{appId:e,expiration:i,token:await at({privateKey:r,payload:n})}}({id:e,privateKey:t,now:s&&Math.floor(Date.now()/1e3)+s});return{type:"app",token:r.token,appId:r.appId,expiresAt:new Date(1e3*r.expiration).toISOString()}}catch(r){throw"-----BEGIN RSA PRIVATE KEY-----"===t?new Error("The 'privateKey` option contains only the first line '-----BEGIN RSA PRIVATE KEY-----'. If you are setting it using a `.env` file, make sure it is set on a single line with newlines replaced by '\n'"):r}}function wt({installationId:e,permissions:t={},repositoryIds:s=[],repositoryNames:r=[]}){const o=Object.keys(t).sort().map((e=>"read"===t[e]?e:`${e}!`)).join(",");return[e,s.sort().join(","),r.join(","),o].filter(Boolean).join("|")}function Et({installationId:e,token:t,createdAt:s,expiresAt:r,repositorySelection:o,permissions:i,repositoryIds:n,repositoryNames:a,singleFileName:c}){return Object.assign({type:"token",tokenType:"installation",token:t,installationId:e,permissions:i,createdAt:s,expiresAt:r,repositorySelection:o},n?{repositoryIds:n}:null,a?{repositoryNames:a}:null,c?{singleFileName:c}:null)}async function bt(e,t,s){const r=Number(t.installationId||e.installationId);if(!r)throw new Error("[@octokit/auth-app] installationId option is required for installation authentication.");if(t.factory){const{type:s,factory:r,oauthApp:o,...i}={...e,...t};return r(i)}const o=Object.assign({installationId:r},t);if(!t.refresh){const t=await async function(e,t){const s=wt(t),r=await e.get(s);if(!r)return;const[o,i,n,a,c,l]=r.split("|");return{token:o,createdAt:i,expiresAt:n,permissions:t.permissions||c.split(/,/).reduce(((e,t)=>(/!$/.test(t)?e[t.slice(0,-1)]="write":e[t]="read",e)),{}),repositoryIds:t.repositoryIds,repositoryNames:t.repositoryNames,singleFileName:l,repositorySelection:a}}(e.cache,o);if(t){const{token:e,createdAt:s,expiresAt:o,permissions:i,repositoryIds:n,repositoryNames:a,singleFileName:c,repositorySelection:l}=t;return Et({installationId:r,token:e,createdAt:s,expiresAt:o,permissions:i,repositorySelection:l,repositoryIds:n,repositoryNames:a,singleFileName:c})}}const i=await yt(e),n=s||e.request,{data:{token:a,expires_at:c,repositories:l,permissions:u,repository_selection:p,single_file:d}}=await n("POST /app/installations/{installation_id}/access_tokens",{installation_id:r,repository_ids:t.repositoryIds,repositories:t.repositoryNames,permissions:t.permissions,mediaType:{previews:["machine-man"]},headers:{authorization:`bearer ${i.token}`}}),h=u||{},g=p||"all",m=l?l.map((e=>e.id)):void 0,_=l?l.map((e=>e.name)):void 0,f=(new Date).toISOString();return await async function(e,t,s){const r=wt(t),o=t.permissions?"":Object.keys(s.permissions).map((e=>`${e}${"write"===s.permissions[e]?"!":""}`)).join(","),i=[s.token,s.createdAt,s.expiresAt,s.repositorySelection,o,s.singleFileName].join("|");await e.set(r,i)}(e.cache,o,{token:a,createdAt:f,expiresAt:c,repositorySelection:g,permissions:h,repositoryIds:m,repositoryNames:_,singleFileName:d}),Et({installationId:r,token:a,createdAt:f,expiresAt:c,repositorySelection:g,permissions:h,repositoryIds:m,repositoryNames:_,singleFileName:d})}async function kt(e,t){switch(t.type){case"app":return yt(e);case"oauth-app":return e.oauthApp({type:"oauth-app"});case"installation":return bt(e,{...t,type:"installation"});case"oauth-user":return e.oauthApp(t);default:throw new Error(`Invalid auth type: ${t.type}`)}}var vt=function(e){const t=`^(?:${e.map((e=>e.split("/").map((e=>e.startsWith("{")?"(?:.+?)":e)).join("/"))).map((e=>`(?:${e})`)).join("|")})$`;return new RegExp(t,"i")}(["/app","/app/hook/config","/app/hook/deliveries","/app/hook/deliveries/{delivery_id}","/app/hook/deliveries/{delivery_id}/attempts","/app/installations","/app/installations/{installation_id}","/app/installations/{installation_id}/access_tokens","/app/installations/{installation_id}/suspended","/app/installation-requests","/marketplace_listing/accounts/{account_id}","/marketplace_listing/plan","/marketplace_listing/plans","/marketplace_listing/plans/{plan_id}/accounts","/marketplace_listing/stubbed/accounts/{account_id}","/marketplace_listing/stubbed/plan","/marketplace_listing/stubbed/plans","/marketplace_listing/stubbed/plans/{plan_id}/accounts","/orgs/{org}/installation","/repos/{owner}/{repo}/installation","/users/{username}/installation"]);var St=5e3;async function At(e,t,s,r){const o=t.endpoint.merge(s,r),i=o.url;if(/\/login\/oauth\/access_token$/.test(i))return t(o);if(function(e){return!!e&&vt.test(e.split("?")[0])}(i.replace(t.endpoint.DEFAULTS.baseUrl,""))){const{token:s}=await yt(e);let r;o.headers.authorization=`bearer ${s}`;try{r=await t(o)}catch(c){if(function(e){return!(e.message.match(/'Expiration time' claim \('exp'\) must be a numeric value representing the future time at which the assertion expires/)||e.message.match(/'Issued at' claim \('iat'\) must be an Integer representing the time that the assertion was issued/))}(c))throw c;if(void 0===c.response.headers.date)throw c;const s=Math.floor((Date.parse(c.response.headers.date)-Date.parse((new Date).toString()))/1e3);e.log.warn(c.message),e.log.warn(`[@octokit/auth-app] GitHub API time and system time are different by ${s} seconds. Retrying request with the difference accounted for.`);const{token:r}=await yt({...e,timeDifference:s});return o.headers.authorization=`bearer ${r}`,t(o)}return r}if(Ye(i)){const s=await e.oauthApp({type:"oauth-app"});return o.headers.authorization=s.headers.authorization,t(o)}const{token:n,createdAt:a}=await bt(e,{},t);return o.headers.authorization=`token ${n}`,Ot(e,t,o,a)}async function Ot(e,t,s,r,o=0){const i=+new Date-+new Date(r);try{return await t(s)}catch(n){if(401!==n.status)throw n;if(i>=St)throw o>0&&(n.message=`After ${o} retries within ${i/1e3}s of creating the installation access token, the response remains 401. At this point, the cause may be an authentication problem or a system outage. Please check https://www.githubstatus.com for status information`),n;const a=1e3*++o;return e.log.warn(`[@octokit/auth-app] Retrying after 401 response to account for token replication delay (retry: ${o}, wait: ${a/1e3}s)`),await new Promise((e=>setTimeout(e,a))),Ot(e,t,s,r,o)}}var Pt="7.1.0";function Gt(e){if(!e.appId)throw new Error("[@octokit/auth-app] appId option is required");if(!e.privateKey)throw new Error("[@octokit/auth-app] privateKey option is required");if("installationId"in e&&!e.installationId)throw new Error("[@octokit/auth-app] installationId is set to a falsy value");const t=Object.assign({warn:console.warn.bind(console)},e.log),s=e.request||R.defaults({headers:{"user-agent":`octokit-auth-app.js/${Pt} ${r()}`}}),o=Object.assign({request:s,cache:new Tt({max:15e3,ttl:354e4})},e,e.installationId?{installationId:Number(e.installationId)}:{},{log:t,oauthApp:st({clientType:"github-app",clientId:e.clientId||"",clientSecret:e.clientSecret||"",request:s})});return Object.assign(kt.bind(null,o),{hook:At.bind(null,o)})}async function Rt(e){return{type:"unauthenticated",reason:e}}var Ft=/\babuse\b/i;async function Dt(e,t,s,r){const o=t.endpoint.merge(s,r);return t(o).catch((t=>{if(404===t.status)throw t.message=`Not found. May be due to lack of authentication. Reason: ${e}`,t;if(function(e){return 403===e.status&&!!e.response&&"0"===e.response.headers["x-ratelimit-remaining"]}(t))throw t.message=`API rate limit exceeded. This maybe caused by the lack of authentication. Reason: ${e}`,t;if(function(e){return 403===e.status&&Ft.test(e.message)}(t))throw t.message=`You have triggered an abuse detection mechanism. This maybe caused by the lack of authentication. Reason: ${e}`,t;if(401===t.status)throw t.message=`Unauthorized. "${o.method} ${o.url}" failed most likely due to lack of authentication. Reason: ${e}`,t;throw t.status>=400&&t.status<500&&(t.message=t.message.replace(/\.?$/,`. May be caused by lack of authentication (${e}).`)),t}))}var Ut=function(e){if(!e||!e.reason)throw new Error("[@octokit/auth-unauthenticated] No reason passed to createUnauthenticatedAuth");return Object.assign(Rt.bind(null,e.reason),{hook:Dt.bind(null,e.reason)})},Ct="7.1.3";function It(e,t,s){if(Array.isArray(t))for(const r of t)It(e,r,s);else e.eventHandlers[t]||(e.eventHandlers[t]=[]),e.eventHandlers[t].push(s)}var Lt=V.defaults({userAgent:`octokit-oauth-app.js/${Ct} ${r()}`});async function jt(e,t){const{name:s,action:r}=t;if(e.eventHandlers[`${s}.${r}`])for(const o of e.eventHandlers[`${s}.${r}`])await o(t);if(e.eventHandlers[s])for(const o of e.eventHandlers[s])await o(t)}async function qt(e,t){return e.octokit.auth({type:"oauth-user",...t,async factory(t){const s=new e.Octokit({authStrategy:Xe,auth:t}),r=await s.auth({type:"get"});return await jt(e,{name:"token",action:"created",token:r.token,scopes:r.scopes,authentication:r,octokit:s}),s}})}function xt(e,t){const s={clientId:e.clientId,request:e.octokit.request,...t,allowSignup:e.allowSignup??t.allowSignup,redirectUrl:t.redirectUrl??e.redirectUrl,scopes:t.scopes??e.defaultScopes};return function({request:e=R,...t}){return Oe({...t,baseUrl:Pe(e)})}({clientType:e.clientType,...s})}async function zt(e,t){const s=await e.octokit.auth({type:"oauth-user",...t});return await jt(e,{name:"token",action:"created",token:s.token,scopes:s.scopes,authentication:s,octokit:new e.Octokit({authStrategy:Xe,auth:{clientType:e.clientType,clientId:e.clientId,clientSecret:e.clientSecret,token:s.token,scopes:s.scopes,refreshToken:s.refreshToken,expiresAt:s.expiresAt,refreshTokenExpiresAt:s.refreshTokenExpiresAt}})}),{authentication:s}}async function $t(e,t){const s=await Ue({clientType:e.clientType,clientId:e.clientId,clientSecret:e.clientSecret,request:e.octokit.request,...t});return Object.assign(s.authentication,{type:"token",tokenType:"oauth"}),s}async function Bt(e,t){const s={clientId:e.clientId,clientSecret:e.clientSecret,request:e.octokit.request,...t};if("oauth-app"===e.clientType){const t=await Le({clientType:"oauth-app",...s}),r=Object.assign(t.authentication,{type:"token",tokenType:"oauth"});return await jt(e,{name:"token",action:"reset",token:t.authentication.token,scopes:t.authentication.scopes||void 0,authentication:r,octokit:new e.Octokit({authStrategy:Xe,auth:{clientType:e.clientType,clientId:e.clientId,clientSecret:e.clientSecret,token:t.authentication.token,scopes:t.authentication.scopes}})}),{...t,authentication:r}}const r=await Le({clientType:"github-app",...s}),o=Object.assign(r.authentication,{type:"token",tokenType:"oauth"});return await jt(e,{name:"token",action:"reset",token:r.authentication.token,authentication:o,octokit:new e.Octokit({authStrategy:Xe,auth:{clientType:e.clientType,clientId:e.clientId,clientSecret:e.clientSecret,token:r.authentication.token}})}),{...r,authentication:o}}async function Wt(e,t){if("oauth-app"===e.clientType)throw new Error("[@octokit/oauth-app] app.refreshToken() is not supported for OAuth Apps");const s=await Ce({clientType:"github-app",clientId:e.clientId,clientSecret:e.clientSecret,request:e.octokit.request,refreshToken:t.refreshToken}),r=Object.assign(s.authentication,{type:"token",tokenType:"oauth"});return await jt(e,{name:"token",action:"refreshed",token:s.authentication.token,authentication:r,octokit:new e.Octokit({authStrategy:Xe,auth:{clientType:e.clientType,clientId:e.clientId,clientSecret:e.clientSecret,token:s.authentication.token}})}),{...s,authentication:r}}async function Mt(e,t){if("oauth-app"===e.clientType)throw new Error("[@octokit/oauth-app] app.scopeToken() is not supported for OAuth Apps");const s=await async function(e){const{request:t,clientType:s,clientId:r,clientSecret:o,token:i,...n}=e,a=t||R,c=await a("POST /applications/{client_id}/token/scoped",{headers:{authorization:`basic ${btoa(`${r}:${o}`)}`},client_id:r,access_token:i,...n}),l=Object.assign({clientType:s,clientId:r,clientSecret:o,token:c.data.token},c.data.expires_at?{expiresAt:c.data.expires_at}:{});return{...c,authentication:l}}({clientType:"github-app",clientId:e.clientId,clientSecret:e.clientSecret,request:e.octokit.request,...t}),r=Object.assign(s.authentication,{type:"token",tokenType:"oauth"});return await jt(e,{name:"token",action:"scoped",token:s.authentication.token,authentication:r,octokit:new e.Octokit({authStrategy:Xe,auth:{clientType:e.clientType,clientId:e.clientId,clientSecret:e.clientSecret,token:s.authentication.token}})}),{...s,authentication:r}}async function Ht(e,t){const s={clientId:e.clientId,clientSecret:e.clientSecret,request:e.octokit.request,...t},r="oauth-app"===e.clientType?await je({clientType:"oauth-app",...s}):await je({clientType:"github-app",...s});return await jt(e,{name:"token",action:"deleted",token:t.token,octokit:new e.Octokit({authStrategy:Ut,auth:{reason:'Handling "token.deleted" event. The access for the token has been revoked.'}})}),r}async function Nt(e,t){const s={clientId:e.clientId,clientSecret:e.clientSecret,request:e.octokit.request,...t},r="oauth-app"===e.clientType?await qe({clientType:"oauth-app",...s}):await qe({clientType:"github-app",...s});return await jt(e,{name:"token",action:"deleted",token:t.token,octokit:new e.Octokit({authStrategy:Ut,auth:{reason:'Handling "token.deleted" event. The access for the token has been revoked.'}})}),await jt(e,{name:"authorization",action:"deleted",token:t.token,octokit:new e.Octokit({authStrategy:Ut,auth:{reason:'Handling "authorization.deleted" event. The access for the app has been revoked.'}})}),r}var Vt=class{static VERSION=Ct;static defaults(e){return class extends(this){constructor(...t){super({...e,...t[0]})}}}constructor(e){const t=e.Octokit||Lt;this.type=e.clientType||"oauth-app";const s=new t({authStrategy:st,auth:{clientType:this.type,clientId:e.clientId,clientSecret:e.clientSecret}}),r={clientType:this.type,clientId:e.clientId,clientSecret:e.clientSecret,defaultScopes:e.defaultScopes||[],allowSignup:e.allowSignup,baseUrl:e.baseUrl,redirectUrl:e.redirectUrl,log:e.log,Octokit:t,octokit:s,eventHandlers:{}};this.on=It.bind(null,r),this.octokit=s,this.getUserOctokit=qt.bind(null,r),this.getWebFlowAuthorizationUrl=xt.bind(null,r),this.createToken=zt.bind(null,r),this.checkToken=$t.bind(null,r),this.resetToken=Bt.bind(null,r),this.refreshToken=Wt.bind(null,r),this.scopeToken=Mt.bind(null,r),this.deleteToken=Ht.bind(null,r),this.deleteAuthorization=Nt.bind(null,r)}type;on;octokit;getUserOctokit;getWebFlowAuthorizationUrl;createToken;checkToken;resetToken;refreshToken;scopeToken;deleteToken;deleteAuthorization};const Kt=()=>"",Jt=/\s+at.*[(\s](.*)\)?/,Yt=/^(?:(?:(?:node|node:[\w/]+|(?:(?:node:)?internal\/[\w/]*|.*node_modules\/(?:babel-polyfill|pirates)\/.*)?\w+)(?:\.js)?:\d+:\d+)|native)/;function Qt(e,{pretty:t=!1,basePath:s,pathFilter:r}={}){const o=s&&new RegExp(`(file://)?${function(e){if("string"!=typeof e)throw new TypeError("Expected a string");return e.replace(/[|\\{}()[\]^$+*?.]/g,"\\$&").replace(/-/g,"\\x2d")}(s.replace(/\\/g,"/"))}/?`,"g"),i=t?Kt():"";if("string"==typeof e)return e.replace(/\\/g,"/").split("\n").filter((e=>{const t=e.match(Jt);if(null===t||!t[1])return!0;const s=t[1];return!(s.includes(".app/Contents/Resources/electron.asar")||s.includes(".app/Contents/Resources/default_app.asar")||s.includes("node_modules/electron/dist/resources/electron.asar")||s.includes("node_modules/electron/dist/resources/default_app.asar"))&&(r?!Yt.test(s)&&r(s):!Yt.test(s))})).filter((e=>""!==e.trim())).map((e=>(o&&(e=e.replace(o,"")),t&&(e=e.replace(Jt,((e,t)=>e.replace(t,t.replace(i,"~"))))),e))).join("\n")}class Xt extends Error{#W;name="AggregateError";constructor(e){if(!Array.isArray(e))throw new TypeError("Expected input to be an Array, got "+typeof e);let t=(e=e.map((e=>e instanceof Error?e:null!==e&&"object"==typeof e?Object.assign(new Error(e.message),e):new Error(e)))).map((e=>"string"==typeof e.stack&&e.stack.length>0?Qt(e.stack).replaceAll(/\s+at .*aggregate-error\/index.js:\d+:\d+\)?/g,""):String(e))).join("\n");t="\n"+function(e,t=1,s={}){const{indent:r=" ",includeEmptyLines:o=!1}=s;if("string"!=typeof e)throw new TypeError(`Expected \`input\` to be a \`string\`, got \`${typeof e}\``);if("number"!=typeof t)throw new TypeError(`Expected \`count\` to be a \`number\`, got \`${typeof t}\``);if(t<0)throw new RangeError(`Expected \`count\` to be at least 0, got \`${t}\``);if("string"!=typeof r)throw new TypeError(`Expected \`options.indent\` to be a \`string\`, got \`${typeof r}\``);if(0===t)return e;const i=o?/^/gm:/^(?!\s*$)/gm;return e.replace(i,r.repeat(t))}(t,4),super(t),this.#W=e}get errors(){return[...this.#W]}}var Zt=new TextEncoder;async function es(e){return crypto.subtle.importKey("raw",Zt.encode(e),{name:"HMAC",hash:{name:"SHA-256"}},!1,["sign","verify"])}async function ts(e,t){if(!e||!t)throw new TypeError("[@octokit/webhooks-methods] secret & payload required for sign()");if("string"!=typeof t)throw new TypeError("[@octokit/webhooks-methods] payload must be a string");return`sha256=${function(e){return Array.prototype.map.call(new Uint8Array(e),(e=>e.toString(16).padStart(2,"0"))).join("")}(await crypto.subtle.sign("HMAC",await es(e),Zt.encode(t)))}`}async function ss(e,t,s){if(!e||!t||!s)throw new TypeError("[@octokit/webhooks-methods] secret, eventPayload & signature required");if("string"!=typeof t)throw new TypeError("[@octokit/webhooks-methods] eventPayload must be a string");return await crypto.subtle.verify("HMAC",await es(e),function(e){const t=e.match(/[\dA-F]{2}/gi).map((function(e){return parseInt(e,16)}));return new Uint8Array(t)}(s.replace("sha256=","")),Zt.encode(t))}var rs=e=>({debug:()=>{},info:()=>{},warn:console.warn.bind(console),error:console.error.bind(console),...e}),os=["branch_protection_configuration","branch_protection_configuration.disabled","branch_protection_configuration.enabled","branch_protection_rule","branch_protection_rule.created","branch_protection_rule.deleted","branch_protection_rule.edited","check_run","check_run.completed","check_run.created","check_run.requested_action","check_run.rerequested","check_suite","check_suite.completed","check_suite.requested","check_suite.rerequested","code_scanning_alert","code_scanning_alert.appeared_in_branch","code_scanning_alert.closed_by_user","code_scanning_alert.created","code_scanning_alert.fixed","code_scanning_alert.reopened","code_scanning_alert.reopened_by_user","commit_comment","commit_comment.created","create","custom_property","custom_property.created","custom_property.deleted","custom_property.updated","custom_property_values","custom_property_values.updated","delete","dependabot_alert","dependabot_alert.auto_dismissed","dependabot_alert.auto_reopened","dependabot_alert.created","dependabot_alert.dismissed","dependabot_alert.fixed","dependabot_alert.reintroduced","dependabot_alert.reopened","deploy_key","deploy_key.created","deploy_key.deleted","deployment","deployment.created","deployment_protection_rule","deployment_protection_rule.requested","deployment_review","deployment_review.approved","deployment_review.rejected","deployment_review.requested","deployment_status","deployment_status.created","discussion","discussion.answered","discussion.category_changed","discussion.closed","discussion.created","discussion.deleted","discussion.edited","discussion.labeled","discussion.locked","discussion.pinned","discussion.reopened","discussion.transferred","discussion.unanswered","discussion.unlabeled","discussion.unlocked","discussion.unpinned","discussion_comment","discussion_comment.created","discussion_comment.deleted","discussion_comment.edited","fork","github_app_authorization","github_app_authorization.revoked","gollum","installation","installation.created","installation.deleted","installation.new_permissions_accepted","installation.suspend","installation.unsuspend","installation_repositories","installation_repositories.added","installation_repositories.removed","installation_target","installation_target.renamed","issue_comment","issue_comment.created","issue_comment.deleted","issue_comment.edited","issues","issues.assigned","issues.closed","issues.deleted","issues.demilestoned","issues.edited","issues.labeled","issues.locked","issues.milestoned","issues.opened","issues.pinned","issues.reopened","issues.transferred","issues.unassigned","issues.unlabeled","issues.unlocked","issues.unpinned","label","label.created","label.deleted","label.edited","marketplace_purchase","marketplace_purchase.cancelled","marketplace_purchase.changed","marketplace_purchase.pending_change","marketplace_purchase.pending_change_cancelled","marketplace_purchase.purchased","member","member.added","member.edited","member.removed","membership","membership.added","membership.removed","merge_group","merge_group.checks_requested","merge_group.destroyed","meta","meta.deleted","milestone","milestone.closed","milestone.created","milestone.deleted","milestone.edited","milestone.opened","org_block","org_block.blocked","org_block.unblocked","organization","organization.deleted","organization.member_added","organization.member_invited","organization.member_removed","organization.renamed","package","package.published","package.updated","page_build","personal_access_token_request","personal_access_token_request.approved","personal_access_token_request.cancelled","personal_access_token_request.created","personal_access_token_request.denied","ping","project","project.closed","project.created","project.deleted","project.edited","project.reopened","project_card","project_card.converted","project_card.created","project_card.deleted","project_card.edited","project_card.moved","project_column","project_column.created","project_column.deleted","project_column.edited","project_column.moved","projects_v2","projects_v2.closed","projects_v2.created","projects_v2.deleted","projects_v2.edited","projects_v2.reopened","projects_v2_item","projects_v2_item.archived","projects_v2_item.converted","projects_v2_item.created","projects_v2_item.deleted","projects_v2_item.edited","projects_v2_item.reordered","projects_v2_item.restored","public","pull_request","pull_request.assigned","pull_request.auto_merge_disabled","pull_request.auto_merge_enabled","pull_request.closed","pull_request.converted_to_draft","pull_request.demilestoned","pull_request.dequeued","pull_request.edited","pull_request.enqueued","pull_request.labeled","pull_request.locked","pull_request.milestoned","pull_request.opened","pull_request.ready_for_review","pull_request.reopened","pull_request.review_request_removed","pull_request.review_requested","pull_request.synchronize","pull_request.unassigned","pull_request.unlabeled","pull_request.unlocked","pull_request_review","pull_request_review.dismissed","pull_request_review.edited","pull_request_review.submitted","pull_request_review_comment","pull_request_review_comment.created","pull_request_review_comment.deleted","pull_request_review_comment.edited","pull_request_review_thread","pull_request_review_thread.resolved","pull_request_review_thread.unresolved","push","registry_package","registry_package.published","registry_package.updated","release","release.created","release.deleted","release.edited","release.prereleased","release.published","release.released","release.unpublished","repository","repository.archived","repository.created","repository.deleted","repository.edited","repository.privatized","repository.publicized","repository.renamed","repository.transferred","repository.unarchived","repository_advisory","repository_advisory.published","repository_advisory.reported","repository_dispatch","repository_dispatch.sample.collected","repository_import","repository_ruleset","repository_ruleset.created","repository_ruleset.deleted","repository_ruleset.edited","repository_vulnerability_alert","repository_vulnerability_alert.create","repository_vulnerability_alert.dismiss","repository_vulnerability_alert.reopen","repository_vulnerability_alert.resolve","secret_scanning_alert","secret_scanning_alert.created","secret_scanning_alert.reopened","secret_scanning_alert.resolved","secret_scanning_alert.revoked","secret_scanning_alert.validated","secret_scanning_alert_location","secret_scanning_alert_location.created","security_advisory","security_advisory.published","security_advisory.updated","security_advisory.withdrawn","security_and_analysis","sponsorship","sponsorship.cancelled","sponsorship.created","sponsorship.edited","sponsorship.pending_cancellation","sponsorship.pending_tier_change","sponsorship.tier_changed","star","star.created","star.deleted","status","team","team.added_to_repository","team.created","team.deleted","team.edited","team.removed_from_repository","team_add","watch","watch.started","workflow_dispatch","workflow_job","workflow_job.completed","workflow_job.in_progress","workflow_job.queued","workflow_job.waiting","workflow_run","workflow_run.completed","workflow_run.in_progress","workflow_run.requested"];function is(e,t,s){e.hooks[t]||(e.hooks[t]=[]),e.hooks[t].push(s)}function ns(e,t,s){if(Array.isArray(t))t.forEach((t=>ns(e,t,s)));else{if(["*","error"].includes(t)){const e="*"===t?"any":t,s=`Using the "${t}" event with the regular Webhooks.on() function is not supported. Please use the Webhooks.on${e.charAt(0).toUpperCase()+e.slice(1)}() method instead`;throw new Error(s)}os.includes(t)||e.log.warn(`"${t}" is not a known webhook name (https://developer.github.com/v3/activity/events/types/)`),is(e,t,s)}}function as(e,t){is(e,"*",t)}function cs(e,t){is(e,"error",t)}function ls(e,t){let s;try{s=e(t)}catch(r){console.log('FATAL: Error occurred in "error" event handler'),console.log(r)}s&&s.catch&&s.catch((e=>{console.log('FATAL: Error occurred in "error" event handler'),console.log(e)}))}function us(e,t){const s=e.hooks.error||[];if(t instanceof Error){const e=Object.assign(new Xt([t]),{event:t});return s.forEach((t=>ls(t,e))),Promise.reject(e)}if(!t||!t.name)throw new Xt(["Event name not passed"]);if(!t.payload)throw new Xt(["Event payload not passed"]);const r=function(e,t,s){const r=[e.hooks[s],e.hooks["*"]];return t&&r.unshift(e.hooks[`${s}.${t}`]),[].concat(...r.filter(Boolean))}(e,"action"in t.payload?t.payload.action:null,t.name);if(0===r.length)return Promise.resolve();const o=[],i=r.map((s=>{let r=Promise.resolve(t);return e.transform&&(r=r.then(e.transform)),r.then((e=>s(e))).catch((e=>o.push(Object.assign(e,{event:t}))))}));return Promise.all(i).then((()=>{if(0===o.length)return;const e=new Xt(o);throw Object.assign(e,{event:t}),s.forEach((t=>ls(t,e))),e}))}function ps(e,t,s){if(Array.isArray(t))t.forEach((t=>ps(e,t,s)));else if(e.hooks[t])for(let r=e.hooks[t].length-1;r>=0;r--)if(e.hooks[t][r]===s)return void e.hooks[t].splice(r,1)}function ds(e){const t={hooks:{},log:rs(e&&e.log)};return e&&e.transform&&(t.transform=e.transform),{on:ns.bind(null,t),onAny:as.bind(null,t),onError:cs.bind(null,t),removeListener:ps.bind(null,t),receive:us.bind(null,t)}}async function hs(e,t){if(!await ss(e.secret,t.payload,t.signature).catch((()=>!1))){const s=new Error("[@octokit/webhooks] signature does not match event payload and secret");return e.eventHandler.receive(Object.assign(s,{event:t,status:400}))}let s;try{s=JSON.parse(t.payload)}catch(r){throw r.message="Invalid JSON",r.status=400,new Xt([r])}return e.eventHandler.receive({id:t.id,name:t.name,payload:s})}var gs=class{sign;verify;on;onAny;onError;removeListener;receive;verifyAndReceive;constructor(e){if(!e||!e.secret)throw new Error("[@octokit/webhooks] options.secret required");const t={eventHandler:ds(e),secret:e.secret,hooks:{},log:rs(e.log)};this.sign=ts.bind(null,e.secret),this.verify=ss.bind(null,e.secret),this.on=t.eventHandler.on,this.onAny=t.eventHandler.onAny,this.onError=t.eventHandler.onError,this.removeListener=t.eventHandler.removeListener,this.receive=t.eventHandler.receive,this.verifyAndReceive=hs.bind(null,t)}};async function ms(e,t){return e.octokit.auth({type:"installation",installationId:t,factory(e){const s={...e.octokitOptions,authStrategy:Gt,auth:{...e,installationId:t}};return new e.octokit.constructor(s)}})}function _s(e){return Object.assign(fs.bind(null,e),{iterator:Ts.bind(null,e)})}async function fs(e,t){const s=Ts(e)[Symbol.asyncIterator]();let r=await s.next();for(;!r.done;)await t(r.value),r=await s.next()}function Ts(e){return{async*[Symbol.asyncIterator](){const t=Q.iterator(e.octokit,"GET /app/installations");for await(const{data:s}of t)for(const t of s){const s=await ms(e,t.id);yield{octokit:s,installation:t}}}}}function ys(e){return Object.assign(ws.bind(null,e),{iterator:Es.bind(null,e)})}async function ws(e,t,s){const r=Es(e,s?t:void 0)[Symbol.asyncIterator]();let o=await r.next();for(;!o.done;)s?await s(o.value):await t(o.value),o=await r.next()}function Es(e,t){return{async*[Symbol.asyncIterator](){const s=t?function(e,t){return{async*[Symbol.asyncIterator](){yield{octokit:await e.getInstallationOctokit(t)}}}}(e,t.installationId):e.eachInstallation.iterator();for await(const{octokit:e}of s){const t=Q.iterator(e,"GET /installation/repositories");for await(const{data:s}of t)for(const t of s)yield{octokit:e,repository:t}}}}}function bs(e){let t;return async function(s={}){t||(t=async function(e){const{data:t}=await e.octokit.request("GET /app");if(!t)throw new Error("[@octokit/app] unable to fetch metadata for app");return`${t.html_url}/installations/new`}(e));const r=await t,o=new URL(r);return void 0!==s.target_id&&(o.pathname+="/permissions",o.searchParams.append("target_id",s.target_id.toFixed())),void 0!==s.state&&o.searchParams.append("state",s.state),o.href}}var ks=V.plugin(ge,X,(function(e){return{graphql:Object.assign(e.graphql,{paginate:Object.assign(ce(e),{iterator:ne(e)})})}}),ye,Ae).defaults({userAgent:"octokit.js/0.0.0-development",throttle:{onRateLimit:function(e,t,s){if(s.log.warn(`Request quota exhausted for request ${t.method} ${t.url}`),0===t.request.retryCount)return s.log.info(`Retrying after ${e} seconds!`),!0},onSecondaryRateLimit:function(e,t,s){if(s.log.warn(`SecondaryRateLimit detected for request ${t.method} ${t.url}`),0===t.request.retryCount)return s.log.info(`Retrying after ${e} seconds!`),!0}}});(class{static VERSION="15.1.0";static defaults(e){return class extends(this){constructor(...t){super({...e,...t[0]})}}}octokit;webhooks;oauth;getInstallationOctokit;eachInstallation;eachRepository;getInstallationUrl;log;constructor(e){const t=e.Octokit||V,s=Object.assign({appId:e.appId,privateKey:e.privateKey},e.oauth?{clientId:e.oauth.clientId,clientSecret:e.oauth.clientSecret}:{});this.octokit=new t({authStrategy:Gt,auth:s,log:e.log}),this.log=Object.assign({debug:()=>{},info:()=>{},warn:console.warn.bind(console),error:console.error.bind(console)},e.log),e.webhooks?this.webhooks=function(e,t){return new gs({secret:t.secret,transform:async t=>{if(!("installation"in t.payload)||"object"!=typeof t.payload.installation){const s=new e.constructor({authStrategy:Ut,auth:{reason:'"installation" key missing in webhook event payload'}});return{...t,octokit:s}}const s=t.payload.installation.id,r=await e.auth({type:"installation",installationId:s,factory:e=>new e.octokit.constructor({...e.octokitOptions,authStrategy:Gt,auth:{...e,installationId:s}})});return r.hook.before("request",(e=>{e.headers["x-github-delivery"]=t.id})),{...t,octokit:r}}})}(this.octokit,e.webhooks):Object.defineProperty(this,"webhooks",{get(){throw new Error("[@octokit/app] webhooks option not set")}}),e.oauth?this.oauth=new Vt({...e.oauth,clientType:"github-app",Octokit:t}):Object.defineProperty(this,"oauth",{get(){throw new Error("[@octokit/app] oauth.clientId / oauth.clientSecret options are not set")}}),this.getInstallationOctokit=ms.bind(null,this),this.eachInstallation=_s(this),this.eachRepository=ys(this),this.getInstallationUrl=bs(this)}}).defaults({Octokit:ks}),Vt.defaults({Octokit:ks})}}]);